{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d2ef280c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-09T13:33:06.886506Z",
     "iopub.status.busy": "2025-07-09T13:33:06.886200Z",
     "iopub.status.idle": "2025-07-09T13:33:08.774818Z",
     "shell.execute_reply": "2025-07-09T13:33:08.773627Z"
    },
    "papermill": {
     "duration": 1.896594,
     "end_time": "2025-07-09T13:33:08.776411",
     "exception": false,
     "start_time": "2025-07-09T13:33:06.879817",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['histopathologic-cancer-detection']\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "#for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#    for filename in filenames:\n",
    "#        print(os.path.join(dirname, filename))\n",
    "print(os.listdir(\"../input\"))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e122fa0",
   "metadata": {
    "papermill": {
     "duration": 0.004807,
     "end_time": "2025-07-09T13:33:08.786092",
     "exception": false,
     "start_time": "2025-07-09T13:33:08.781285",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Libraries**\n",
    "\n",
    "In general i like to load libraries \"on the go\" as this makes the code more understandable, therefore i will only load the most used libraries here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e1df6ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:33:08.796899Z",
     "iopub.status.busy": "2025-07-09T13:33:08.796393Z",
     "iopub.status.idle": "2025-07-09T13:33:28.011798Z",
     "shell.execute_reply": "2025-07-09T13:33:28.010627Z"
    },
    "papermill": {
     "duration": 19.222663,
     "end_time": "2025-07-09T13:33:28.013583",
     "exception": false,
     "start_time": "2025-07-09T13:33:08.790920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-09 13:33:10.867660: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752067991.124288      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752067991.206973      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "tf.config.run_functions_eagerly(True)\n",
    "import keras\n",
    "#from tensorflow import keras\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1a6ed92",
   "metadata": {
    "papermill": {
     "duration": 0.005147,
     "end_time": "2025-07-09T13:33:28.031509",
     "exception": false,
     "start_time": "2025-07-09T13:33:28.026362",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "74070830",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:33:28.042316Z",
     "iopub.status.busy": "2025-07-09T13:33:28.041711Z",
     "iopub.status.idle": "2025-07-09T13:33:28.523474Z",
     "shell.execute_reply": "2025-07-09T13:33:28.522596Z"
    },
    "papermill": {
     "duration": 0.488794,
     "end_time": "2025-07-09T13:33:28.525162",
     "exception": false,
     "start_time": "2025-07-09T13:33:28.036368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_labels = pd.read_csv(\"/kaggle/input/histopathologic-cancer-detection/train_labels.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a753d24",
   "metadata": {
    "papermill": {
     "duration": 0.004249,
     "end_time": "2025-07-09T13:33:28.534224",
     "exception": false,
     "start_time": "2025-07-09T13:33:28.529975",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection\n",
    "\n",
    "Let us get a first view on the dataset and how it is structured"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "074a8210",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:33:28.544292Z",
     "iopub.status.busy": "2025-07-09T13:33:28.544005Z",
     "iopub.status.idle": "2025-07-09T13:33:28.557781Z",
     "shell.execute_reply": "2025-07-09T13:33:28.556759Z"
    },
    "papermill": {
     "duration": 0.020479,
     "end_time": "2025-07-09T13:33:28.559338",
     "exception": false,
     "start_time": "2025-07-09T13:33:28.538859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lets look at the first rows: \n",
      "                                         id  label\n",
      "0  f38a6374c348f90b587e046aac6079959adf3835      0\n",
      "1  c18f2d887b7ae4f6742ee445113fa1aef383ed77      1\n",
      "2  755db6279dae599ebb4d39a9123cce439965282d      0\n",
      "3  bc3f0c64fb968ff4a8bd33af6971ecae77c75e08      0\n",
      "4  068aba587a4950175d04c680d38943fd488d6a9d      0\n"
     ]
    }
   ],
   "source": [
    "print(\"Lets look at the first rows: \")\n",
    "print(train_labels.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cd18dcfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:33:28.569810Z",
     "iopub.status.busy": "2025-07-09T13:33:28.569439Z",
     "iopub.status.idle": "2025-07-09T13:33:28.743573Z",
     "shell.execute_reply": "2025-07-09T13:33:28.742402Z"
    },
    "papermill": {
     "duration": 0.181405,
     "end_time": "2025-07-09T13:33:28.745388",
     "exception": false,
     "start_time": "2025-07-09T13:33:28.563983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "from keras.utils import to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "def getfiles(path, max_length):\n",
    "    files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "    file_list = listdir(path)\n",
    "\n",
    "    for file in range(max_length):  #file_list (0,50000,5)\n",
    "        \n",
    "        current_file_path = join(mypath, file_list[file])\n",
    "    \n",
    "        if isfile(current_file_path):\n",
    "            img = plt.imread(current_file_path)\n",
    "            new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "            new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "            files.loc[len(files)] = [new_file_path, img]\n",
    "\n",
    "    complete_files = pd.merge(files,train_labels, how = \"left\",on = \"id\" ).drop(columns = [\"id\"])\n",
    "    complete_files = complete_files.to_numpy()\n",
    "    complete_files[:,0] = complete_files[:,0] / 255\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(np.stack(complete_files[:,0], axis = 0), \n",
    "                                                        complete_files[:,1], test_size=0.2, random_state=4790)\n",
    "\n",
    "    #X_train = tf.convert_to_tensor(X_train)\n",
    "\n",
    "    #X_test = tf.convert_to_tensor(X_test)\n",
    "\n",
    "    #label = complete_files[:,1].astype(\"float32\").reshape((len(complete_files[:,1]), 1))\n",
    "    \n",
    "    return X_train, X_test, y_train.astype(\"float32\"), y_test.astype(\"float32\") #tf.data.Dataset.from_tensor_slices((np.stack(complete_files[:,0], axis = 0),label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb5996a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T19:49:32.931084Z",
     "iopub.status.busy": "2025-07-08T19:49:32.930719Z",
     "iopub.status.idle": "2025-07-08T19:49:32.939368Z",
     "shell.execute_reply": "2025-07-08T19:49:32.938276Z",
     "shell.execute_reply.started": "2025-07-08T19:49:32.931063Z"
    },
    "papermill": {
     "duration": 0.004297,
     "end_time": "2025-07-09T13:33:28.755572",
     "exception": false,
     "start_time": "2025-07-09T13:33:28.751275",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "complete_files[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1237ee9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:33:28.766569Z",
     "iopub.status.busy": "2025-07-09T13:33:28.766262Z",
     "iopub.status.idle": "2025-07-09T13:36:47.818192Z",
     "shell.execute_reply": "2025-07-09T13:36:47.817054Z"
    },
    "papermill": {
     "duration": 199.059959,
     "end_time": "2025-07-09T13:36:47.820255",
     "exception": false,
     "start_time": "2025-07-09T13:33:28.760296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mypath = \"/kaggle/input/histopathologic-cancer-detection/train\"\n",
    "X_train, X_test, y_train, y_test = getfiles(path = mypath, max_length = 20000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4095246",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:36:47.832172Z",
     "iopub.status.busy": "2025-07-09T13:36:47.831851Z",
     "iopub.status.idle": "2025-07-09T13:36:47.837712Z",
     "shell.execute_reply": "2025-07-09T13:36:47.836365Z"
    },
    "papermill": {
     "duration": 0.013484,
     "end_time": "2025-07-09T13:36:47.839376",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.825892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 0. 1. ... 1. 1. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc6bf9bd",
   "metadata": {
    "papermill": {
     "duration": 0.004306,
     "end_time": "2025-07-09T13:36:47.848323",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.844017",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "check for NAs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26f38e16",
   "metadata": {
    "papermill": {
     "duration": 0.004239,
     "end_time": "2025-07-09T13:36:47.857123",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.852884",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "https://www.tensorflow.org/tutorials/load_data/images\n",
    "\n",
    "To Do\n",
    "- add poo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c86684d6",
   "metadata": {
    "papermill": {
     "duration": 0.004206,
     "end_time": "2025-07-09T13:36:47.865829",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.861623",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data can be saved as described here:\n",
    "https://www.kaggle.com/code/nicholasdunham/saving-and-persisting-data-in-kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "29552343",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:36:47.877082Z",
     "iopub.status.busy": "2025-07-09T13:36:47.876262Z",
     "iopub.status.idle": "2025-07-09T13:36:47.880711Z",
     "shell.execute_reply": "2025-07-09T13:36:47.879725Z"
    },
    "papermill": {
     "duration": 0.013394,
     "end_time": "2025-07-09T13:36:47.883706",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.870312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from tempfile import TemporaryFile\n",
    "# go to kaggle/working to store file\n",
    "\n",
    "#np.save(\"numpy_array_final\", complete_files)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5847848",
   "metadata": {
    "papermill": {
     "duration": 0.0045,
     "end_time": "2025-07-09T13:36:47.893480",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.888980",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection and Cleaning\n",
    "\n",
    "to be continued"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ae6f7df",
   "metadata": {
    "papermill": {
     "duration": 0.00495,
     "end_time": "2025-07-09T13:36:47.903262",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.898312",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"The image shape is:\", complete_files[:,0][0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0bcf8ec",
   "metadata": {
    "papermill": {
     "duration": 0.00457,
     "end_time": "2025-07-09T13:36:47.912548",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.907978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "plt.imshow(complete_files[:,0][0].astype(\"uint8\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38b9faf8",
   "metadata": {
    "papermill": {
     "duration": 0.004767,
     "end_time": "2025-07-09T13:36:47.921931",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.917164",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prepare Data\n",
    "\n",
    "Insturctions here:\n",
    "https://www.tensorflow.org/guide/keras/preprocessing_layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8ee72de",
   "metadata": {
    "papermill": {
     "duration": 0.004501,
     "end_time": "2025-07-09T13:36:47.931518",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.927017",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train the first model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3a3da3b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:36:47.942170Z",
     "iopub.status.busy": "2025-07-09T13:36:47.941817Z",
     "iopub.status.idle": "2025-07-09T13:36:48.028111Z",
     "shell.execute_reply": "2025-07-09T13:36:48.027003Z"
    },
    "papermill": {
     "duration": 0.093719,
     "end_time": "2025-07-09T13:36:48.029855",
     "exception": false,
     "start_time": "2025-07-09T13:36:47.936136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization\n",
    "from tensorflow.keras import layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8936a95b",
   "metadata": {
    "papermill": {
     "duration": 0.004447,
     "end_time": "2025-07-09T13:36:48.038942",
     "exception": false,
     "start_time": "2025-07-09T13:36:48.034495",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 5\n",
    "filter_size = 3\n",
    "pool_size = 2\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(2, activation='sigmoid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bf5f3681",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:36:48.049322Z",
     "iopub.status.busy": "2025-07-09T13:36:48.048995Z",
     "iopub.status.idle": "2025-07-09T13:36:48.273431Z",
     "shell.execute_reply": "2025-07-09T13:36:48.272749Z"
    },
    "papermill": {
     "duration": 0.231557,
     "end_time": "2025-07-09T13:36:48.274973",
     "exception": false,
     "start_time": "2025-07-09T13:36:48.043416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "2025-07-09 13:36:48.067066: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 3\n",
    "filter_size = 3\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "#model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "#model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "#model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "#model.add(BatchNormalization())\n",
    "#model.add(Activation('relu'))\n",
    "#model.add(Dropout(0.1))\n",
    "\n",
    "#model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(16, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(8, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0140d2e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:36:48.285826Z",
     "iopub.status.busy": "2025-07-09T13:36:48.285467Z",
     "iopub.status.idle": "2025-07-09T13:36:48.312117Z",
     "shell.execute_reply": "2025-07-09T13:36:48.311057Z"
    },
    "papermill": {
     "duration": 0.033867,
     "end_time": "2025-07-09T13:36:48.313545",
     "exception": false,
     "start_time": "2025-07-09T13:36:48.279678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">84</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">84</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25392</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │         <span style=\"color: #00af00; text-decoration-color: #00af00\">406,288</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │              \u001b[38;5;34m84\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │              \u001b[38;5;34m12\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (\u001b[38;5;33mActivation\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │              \u001b[38;5;34m84\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │              \u001b[38;5;34m12\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25392\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │         \u001b[38;5;34m406,288\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │             \u001b[38;5;34m136\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m9\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">406,625</span> (1.55 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m406,625\u001b[0m (1.55 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">406,613</span> (1.55 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m406,613\u001b[0m (1.55 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12</span> (48.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m12\u001b[0m (48.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f8d54c08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:36:48.326731Z",
     "iopub.status.busy": "2025-07-09T13:36:48.326337Z",
     "iopub.status.idle": "2025-07-09T13:36:48.341074Z",
     "shell.execute_reply": "2025-07-09T13:36:48.340259Z"
    },
    "papermill": {
     "duration": 0.023134,
     "end_time": "2025-07-09T13:36:48.342744",
     "exception": false,
     "start_time": "2025-07-09T13:36:48.319610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "opt = keras.optimizers.Adam(learning_rate=0.0001)\n",
    "\n",
    "model.compile(\n",
    "  optimizer=opt,\n",
    "  loss='binary_crossentropy',\n",
    "  metrics=['AUC'], # AUC ?\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7afa4fc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:36:48.355532Z",
     "iopub.status.busy": "2025-07-09T13:36:48.354914Z",
     "iopub.status.idle": "2025-07-09T14:09:41.893316Z",
     "shell.execute_reply": "2025-07-09T14:09:41.892262Z"
    },
    "papermill": {
     "duration": 1973.546799,
     "end_time": "2025-07-09T14:09:41.895272",
     "exception": false,
     "start_time": "2025-07-09T13:36:48.348473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/structured_function.py:258: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m168s\u001b[0m 335ms/step - AUC: 0.6408 - loss: 0.6585 - val_AUC: 0.7510 - val_loss: 0.5960\n",
      "Epoch 2/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 330ms/step - AUC: 0.7388 - loss: 0.5893 - val_AUC: 0.7835 - val_loss: 0.5686\n",
      "Epoch 3/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 330ms/step - AUC: 0.7649 - loss: 0.5624 - val_AUC: 0.7841 - val_loss: 0.5555\n",
      "Epoch 4/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 329ms/step - AUC: 0.7722 - loss: 0.5548 - val_AUC: 0.7914 - val_loss: 0.5467\n",
      "Epoch 5/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m166s\u001b[0m 332ms/step - AUC: 0.7961 - loss: 0.5296 - val_AUC: 0.7984 - val_loss: 0.5770\n",
      "Epoch 6/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m166s\u001b[0m 331ms/step - AUC: 0.8321 - loss: 0.4914 - val_AUC: 0.8022 - val_loss: 0.5436\n",
      "Epoch 7/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m162s\u001b[0m 323ms/step - AUC: 0.8459 - loss: 0.4726 - val_AUC: 0.8067 - val_loss: 0.5524\n",
      "Epoch 8/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 330ms/step - AUC: 0.8629 - loss: 0.4465 - val_AUC: 0.8102 - val_loss: 0.5276\n",
      "Epoch 9/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m162s\u001b[0m 325ms/step - AUC: 0.8719 - loss: 0.4312 - val_AUC: 0.8102 - val_loss: 0.5321\n",
      "Epoch 10/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m162s\u001b[0m 324ms/step - AUC: 0.8848 - loss: 0.4141 - val_AUC: 0.8092 - val_loss: 0.5298\n",
      "Epoch 11/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m162s\u001b[0m 323ms/step - AUC: 0.8949 - loss: 0.3974 - val_AUC: 0.8034 - val_loss: 0.5474\n",
      "Epoch 12/12\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m164s\u001b[0m 329ms/step - AUC: 0.9003 - loss: 0.3833 - val_AUC: 0.8110 - val_loss: 0.5494\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "history = model.fit(\n",
    "  X_train,\n",
    "  y_train,\n",
    "  epochs=12,\n",
    "  validation_data=(X_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29a1ddbd",
   "metadata": {
    "papermill": {
     "duration": 0.300125,
     "end_time": "2025-07-09T14:09:42.585636",
     "exception": false,
     "start_time": "2025-07-09T14:09:42.285511",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "BATCH_SIZE = 64\n",
    "SHUFFLE_BUFFER_SIZE = 100\n",
    "\n",
    "train_dataset = complete_files.batch(BATCH_SIZE)\n",
    "\n",
    "#train_dataset = train.shuffle(SHUFFLE_BUFFER_SIZE).batch(BATCH_SIZE)\n",
    "#test_dataset = test.batch(BATCH_SIZE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfeaf933",
   "metadata": {
    "papermill": {
     "duration": 0.304044,
     "end_time": "2025-07-09T14:09:43.194630",
     "exception": false,
     "start_time": "2025-07-09T14:09:42.890586",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "history = model.fit(\n",
    "  train_dataset,\n",
    "  epochs=7) #,validation_data=test_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "93b61f0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T14:09:43.869909Z",
     "iopub.status.busy": "2025-07-09T14:09:43.869394Z",
     "iopub.status.idle": "2025-07-09T14:09:44.159049Z",
     "shell.execute_reply": "2025-07-09T14:09:44.157758Z"
    },
    "papermill": {
     "duration": 0.670796,
     "end_time": "2025-07-09T14:09:44.162626",
     "exception": false,
     "start_time": "2025-07-09T14:09:43.491830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "035d2f1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T14:09:45.081937Z",
     "iopub.status.busy": "2025-07-09T14:09:45.080727Z",
     "iopub.status.idle": "2025-07-09T14:09:45.306919Z",
     "shell.execute_reply": "2025-07-09T14:09:45.305902Z"
    },
    "papermill": {
     "duration": 0.651395,
     "end_time": "2025-07-09T14:09:45.308891",
     "exception": false,
     "start_time": "2025-07-09T14:09:44.657496",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['AUC'])\n",
    "plt.plot(history.history['val_AUC'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 862157,
     "sourceId": 11848,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2207.811847,
   "end_time": "2025-07-09T14:09:49.192787",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-09T13:33:01.380940",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
