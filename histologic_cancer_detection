{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e9f34436",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-09T16:00:39.397568Z",
     "iopub.status.busy": "2025-07-09T16:00:39.397283Z",
     "iopub.status.idle": "2025-07-09T16:00:41.474071Z",
     "shell.execute_reply": "2025-07-09T16:00:41.472853Z"
    },
    "papermill": {
     "duration": 2.087577,
     "end_time": "2025-07-09T16:00:41.475868",
     "exception": false,
     "start_time": "2025-07-09T16:00:39.388291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['histopathologic-cancer-detection']\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "#for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#    for filename in filenames:\n",
    "#        print(os.path.join(dirname, filename))\n",
    "print(os.listdir(\"../input\"))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8051d5e6",
   "metadata": {
    "papermill": {
     "duration": 0.00473,
     "end_time": "2025-07-09T16:00:41.485787",
     "exception": false,
     "start_time": "2025-07-09T16:00:41.481057",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Libraries**\n",
    "\n",
    "In general i like to load libraries \"on the go\" as this makes the code more understandable, therefore i will only load the most used libraries here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "635c9ed5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:00:41.496656Z",
     "iopub.status.busy": "2025-07-09T16:00:41.496189Z",
     "iopub.status.idle": "2025-07-09T16:01:00.085196Z",
     "shell.execute_reply": "2025-07-09T16:01:00.083950Z"
    },
    "papermill": {
     "duration": 18.596439,
     "end_time": "2025-07-09T16:01:00.086982",
     "exception": false,
     "start_time": "2025-07-09T16:00:41.490543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-09 16:00:43.394862: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752076843.641400      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752076843.710348      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "tf.config.run_functions_eagerly(True)\n",
    "import keras\n",
    "#from tensorflow import keras\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24fb5ab4",
   "metadata": {
    "papermill": {
     "duration": 0.004788,
     "end_time": "2025-07-09T16:01:00.097617",
     "exception": false,
     "start_time": "2025-07-09T16:01:00.092829",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0c3a45ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:01:00.109992Z",
     "iopub.status.busy": "2025-07-09T16:01:00.108987Z",
     "iopub.status.idle": "2025-07-09T16:01:00.606032Z",
     "shell.execute_reply": "2025-07-09T16:01:00.605046Z"
    },
    "papermill": {
     "duration": 0.505049,
     "end_time": "2025-07-09T16:01:00.608023",
     "exception": false,
     "start_time": "2025-07-09T16:01:00.102974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_labels = pd.read_csv(\"/kaggle/input/histopathologic-cancer-detection/train_labels.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d05682c",
   "metadata": {
    "papermill": {
     "duration": 0.008306,
     "end_time": "2025-07-09T16:01:00.624921",
     "exception": false,
     "start_time": "2025-07-09T16:01:00.616615",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection\n",
    "\n",
    "Let us get a first view on the dataset and how it is structured"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1c5cfa41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:01:00.642687Z",
     "iopub.status.busy": "2025-07-09T16:01:00.642230Z",
     "iopub.status.idle": "2025-07-09T16:01:00.660135Z",
     "shell.execute_reply": "2025-07-09T16:01:00.658820Z"
    },
    "papermill": {
     "duration": 0.027451,
     "end_time": "2025-07-09T16:01:00.661889",
     "exception": false,
     "start_time": "2025-07-09T16:01:00.634438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lets look at the first rows: \n",
      "                                         id  label\n",
      "0  f38a6374c348f90b587e046aac6079959adf3835      0\n",
      "1  c18f2d887b7ae4f6742ee445113fa1aef383ed77      1\n",
      "2  755db6279dae599ebb4d39a9123cce439965282d      0\n",
      "3  bc3f0c64fb968ff4a8bd33af6971ecae77c75e08      0\n",
      "4  068aba587a4950175d04c680d38943fd488d6a9d      0\n"
     ]
    }
   ],
   "source": [
    "print(\"Lets look at the first rows: \")\n",
    "print(train_labels.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3537d2d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:01:00.673910Z",
     "iopub.status.busy": "2025-07-09T16:01:00.672990Z",
     "iopub.status.idle": "2025-07-09T16:01:00.853720Z",
     "shell.execute_reply": "2025-07-09T16:01:00.852775Z"
    },
    "papermill": {
     "duration": 0.188768,
     "end_time": "2025-07-09T16:01:00.855703",
     "exception": false,
     "start_time": "2025-07-09T16:01:00.666935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "from keras.utils import to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "def getfiles(path, max_length):\n",
    "    files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "    file_list = listdir(path)\n",
    "\n",
    "    for file in range(max_length):  #file_list (0,50000,5)\n",
    "        \n",
    "        current_file_path = join(mypath, file_list[file])\n",
    "    \n",
    "        if isfile(current_file_path):\n",
    "            img = plt.imread(current_file_path)\n",
    "            new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "            new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "            files.loc[len(files)] = [new_file_path, img]\n",
    "\n",
    "    complete_files = pd.merge(files,train_labels, how = \"left\",on = \"id\" ).drop(columns = [\"id\"])\n",
    "    complete_files = complete_files.to_numpy()\n",
    "    complete_files[:,0] = complete_files[:,0] / 255\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(np.stack(complete_files[:,0], axis = 0), \n",
    "                                                        complete_files[:,1], test_size=0.2, random_state=4790)\n",
    "\n",
    "    #X_train = tf.convert_to_tensor(X_train)\n",
    "\n",
    "    #X_test = tf.convert_to_tensor(X_test)\n",
    "\n",
    "    #label = complete_files[:,1].astype(\"float32\").reshape((len(complete_files[:,1]), 1))\n",
    "    \n",
    "    return X_train, X_test, y_train.astype(\"float32\"), y_test.astype(\"float32\") #tf.data.Dataset.from_tensor_slices((np.stack(complete_files[:,0], axis = 0),label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b39d3bee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T19:49:32.931084Z",
     "iopub.status.busy": "2025-07-08T19:49:32.930719Z",
     "iopub.status.idle": "2025-07-08T19:49:32.939368Z",
     "shell.execute_reply": "2025-07-08T19:49:32.938276Z",
     "shell.execute_reply.started": "2025-07-08T19:49:32.931063Z"
    },
    "papermill": {
     "duration": 0.007614,
     "end_time": "2025-07-09T16:01:00.871936",
     "exception": false,
     "start_time": "2025-07-09T16:01:00.864322",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "complete_files[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2f53923a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:01:00.883971Z",
     "iopub.status.busy": "2025-07-09T16:01:00.883052Z",
     "iopub.status.idle": "2025-07-09T16:08:43.501466Z",
     "shell.execute_reply": "2025-07-09T16:08:43.495119Z"
    },
    "papermill": {
     "duration": 462.630121,
     "end_time": "2025-07-09T16:08:43.506763",
     "exception": false,
     "start_time": "2025-07-09T16:01:00.876642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mypath = \"/kaggle/input/histopathologic-cancer-detection/train\"\n",
    "X_train, X_test, y_train, y_test = getfiles(path = mypath, max_length = 30000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "630c28b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:08:43.555324Z",
     "iopub.status.busy": "2025-07-09T16:08:43.554913Z",
     "iopub.status.idle": "2025-07-09T16:08:43.564910Z",
     "shell.execute_reply": "2025-07-09T16:08:43.563573Z"
    },
    "papermill": {
     "duration": 0.020428,
     "end_time": "2025-07-09T16:08:43.567571",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.547143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 0. 1. ... 1. 1. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59fb4ab8",
   "metadata": {
    "papermill": {
     "duration": 0.005064,
     "end_time": "2025-07-09T16:08:43.578960",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.573896",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "check for NAs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18050820",
   "metadata": {
    "papermill": {
     "duration": 0.004795,
     "end_time": "2025-07-09T16:08:43.588968",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.584173",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "https://www.tensorflow.org/tutorials/load_data/images\n",
    "\n",
    "To Do\n",
    "- add poo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "053560d2",
   "metadata": {
    "papermill": {
     "duration": 0.004916,
     "end_time": "2025-07-09T16:08:43.598855",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.593939",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data can be saved as described here:\n",
    "https://www.kaggle.com/code/nicholasdunham/saving-and-persisting-data-in-kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d19f37af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:08:43.611544Z",
     "iopub.status.busy": "2025-07-09T16:08:43.611125Z",
     "iopub.status.idle": "2025-07-09T16:08:43.617088Z",
     "shell.execute_reply": "2025-07-09T16:08:43.616157Z"
    },
    "papermill": {
     "duration": 0.015427,
     "end_time": "2025-07-09T16:08:43.619286",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.603859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from tempfile import TemporaryFile\n",
    "# go to kaggle/working to store file\n",
    "\n",
    "#np.save(\"numpy_array_final\", complete_files)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15406fdc",
   "metadata": {
    "papermill": {
     "duration": 0.009295,
     "end_time": "2025-07-09T16:08:43.637040",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.627745",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection and Cleaning\n",
    "\n",
    "to be continued"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e7f6b56",
   "metadata": {
    "papermill": {
     "duration": 0.006622,
     "end_time": "2025-07-09T16:08:43.652910",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.646288",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"The image shape is:\", complete_files[:,0][0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c908d63",
   "metadata": {
    "papermill": {
     "duration": 0.004568,
     "end_time": "2025-07-09T16:08:43.662552",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.657984",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "plt.imshow(complete_files[:,0][0].astype(\"uint8\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2afe191",
   "metadata": {
    "papermill": {
     "duration": 0.004617,
     "end_time": "2025-07-09T16:08:43.672007",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.667390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prepare Data\n",
    "\n",
    "Insturctions here:\n",
    "https://www.tensorflow.org/guide/keras/preprocessing_layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d6d7f91",
   "metadata": {
    "papermill": {
     "duration": 0.005288,
     "end_time": "2025-07-09T16:08:43.682887",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.677599",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train the first model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "875a115c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:08:43.697350Z",
     "iopub.status.busy": "2025-07-09T16:08:43.696849Z",
     "iopub.status.idle": "2025-07-09T16:08:43.871266Z",
     "shell.execute_reply": "2025-07-09T16:08:43.870174Z"
    },
    "papermill": {
     "duration": 0.183813,
     "end_time": "2025-07-09T16:08:43.873095",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.689282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization\n",
    "from tensorflow.keras import layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c183e74",
   "metadata": {
    "papermill": {
     "duration": 0.005021,
     "end_time": "2025-07-09T16:08:43.883245",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.878224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 5\n",
    "filter_size = 3\n",
    "pool_size = 2\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(2, activation='sigmoid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "31959ae5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:08:43.894880Z",
     "iopub.status.busy": "2025-07-09T16:08:43.894537Z",
     "iopub.status.idle": "2025-07-09T16:08:44.430747Z",
     "shell.execute_reply": "2025-07-09T16:08:44.429700Z"
    },
    "papermill": {
     "duration": 0.544265,
     "end_time": "2025-07-09T16:08:44.432459",
     "exception": false,
     "start_time": "2025-07-09T16:08:43.888194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "2025-07-09 16:08:44.098116: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 3\n",
    "filter_size = 3\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "#model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "#model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "#model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "#model.add(BatchNormalization())\n",
    "#model.add(Activation('relu'))\n",
    "#model.add(Dropout(0.1))\n",
    "\n",
    "#model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(16, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(8, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2d173183",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:08:44.444014Z",
     "iopub.status.busy": "2025-07-09T16:08:44.443648Z",
     "iopub.status.idle": "2025-07-09T16:08:44.472164Z",
     "shell.execute_reply": "2025-07-09T16:08:44.471106Z"
    },
    "papermill": {
     "duration": 0.035943,
     "end_time": "2025-07-09T16:08:44.473666",
     "exception": false,
     "start_time": "2025-07-09T16:08:44.437723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">84</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">84</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25392</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │         <span style=\"color: #00af00; text-decoration-color: #00af00\">406,288</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │              \u001b[38;5;34m84\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │              \u001b[38;5;34m12\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (\u001b[38;5;33mActivation\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │              \u001b[38;5;34m84\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │              \u001b[38;5;34m12\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m3\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25392\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │         \u001b[38;5;34m406,288\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │             \u001b[38;5;34m136\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m9\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">406,625</span> (1.55 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m406,625\u001b[0m (1.55 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">406,613</span> (1.55 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m406,613\u001b[0m (1.55 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12</span> (48.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m12\u001b[0m (48.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b22864c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:08:44.489055Z",
     "iopub.status.busy": "2025-07-09T16:08:44.488337Z",
     "iopub.status.idle": "2025-07-09T16:08:44.504885Z",
     "shell.execute_reply": "2025-07-09T16:08:44.503856Z"
    },
    "papermill": {
     "duration": 0.02572,
     "end_time": "2025-07-09T16:08:44.506868",
     "exception": false,
     "start_time": "2025-07-09T16:08:44.481148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "opt = keras.optimizers.Adam(learning_rate=0.0001)\n",
    "\n",
    "model.compile(\n",
    "  optimizer=opt,\n",
    "  loss='binary_crossentropy',\n",
    "  metrics=['AUC'], # AUC ?\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f0819651",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T16:08:44.521284Z",
     "iopub.status.busy": "2025-07-09T16:08:44.520947Z",
     "iopub.status.idle": "2025-07-09T17:00:13.055738Z",
     "shell.execute_reply": "2025-07-09T17:00:13.054295Z"
    },
    "papermill": {
     "duration": 3088.719964,
     "end_time": "2025-07-09T17:00:13.233569",
     "exception": false,
     "start_time": "2025-07-09T16:08:44.513605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/structured_function.py:258: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m256s\u001b[0m 341ms/step - AUC: 0.6558 - loss: 0.6345 - val_AUC: 0.8234 - val_loss: 0.5616\n",
      "Epoch 2/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m253s\u001b[0m 338ms/step - AUC: 0.7377 - loss: 0.5840 - val_AUC: 0.8265 - val_loss: 0.5482\n",
      "Epoch 3/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m259s\u001b[0m 346ms/step - AUC: 0.7783 - loss: 0.5692 - val_AUC: 0.8228 - val_loss: 0.5389\n",
      "Epoch 4/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m253s\u001b[0m 337ms/step - AUC: 0.7780 - loss: 0.5619 - val_AUC: 0.8316 - val_loss: 0.5240\n",
      "Epoch 5/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m252s\u001b[0m 336ms/step - AUC: 0.7867 - loss: 0.5506 - val_AUC: 0.8334 - val_loss: 0.5238\n",
      "Epoch 6/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m260s\u001b[0m 346ms/step - AUC: 0.7913 - loss: 0.5438 - val_AUC: 0.8308 - val_loss: 0.5194\n",
      "Epoch 7/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m261s\u001b[0m 347ms/step - AUC: 0.8053 - loss: 0.5295 - val_AUC: 0.8254 - val_loss: 0.5087\n",
      "Epoch 8/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m259s\u001b[0m 345ms/step - AUC: 0.8081 - loss: 0.5238 - val_AUC: 0.8343 - val_loss: 0.5016\n",
      "Epoch 9/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m259s\u001b[0m 346ms/step - AUC: 0.8242 - loss: 0.5042 - val_AUC: 0.8253 - val_loss: 0.5060\n",
      "Epoch 10/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m255s\u001b[0m 340ms/step - AUC: 0.8211 - loss: 0.5044 - val_AUC: 0.8327 - val_loss: 0.5001\n",
      "Epoch 11/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m255s\u001b[0m 340ms/step - AUC: 0.8268 - loss: 0.4945 - val_AUC: 0.8319 - val_loss: 0.4955\n",
      "Epoch 12/12\n",
      "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m254s\u001b[0m 338ms/step - AUC: 0.8347 - loss: 0.4856 - val_AUC: 0.8285 - val_loss: 0.4966\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "history = model.fit(\n",
    "  X_train,\n",
    "  y_train,\n",
    "  epochs=12,\n",
    "  validation_data=(X_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a54dfd0",
   "metadata": {
    "papermill": {
     "duration": 0.449839,
     "end_time": "2025-07-09T17:00:14.220256",
     "exception": false,
     "start_time": "2025-07-09T17:00:13.770417",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "BATCH_SIZE = 64\n",
    "SHUFFLE_BUFFER_SIZE = 100\n",
    "\n",
    "train_dataset = complete_files.batch(BATCH_SIZE)\n",
    "\n",
    "#train_dataset = train.shuffle(SHUFFLE_BUFFER_SIZE).batch(BATCH_SIZE)\n",
    "#test_dataset = test.batch(BATCH_SIZE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a4f2aa7",
   "metadata": {
    "papermill": {
     "duration": 0.536401,
     "end_time": "2025-07-09T17:00:15.212369",
     "exception": false,
     "start_time": "2025-07-09T17:00:14.675968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "history = model.fit(\n",
    "  train_dataset,\n",
    "  epochs=7) #,validation_data=test_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a99e29f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T17:00:16.123848Z",
     "iopub.status.busy": "2025-07-09T17:00:16.123484Z",
     "iopub.status.idle": "2025-07-09T17:00:16.474287Z",
     "shell.execute_reply": "2025-07-09T17:00:16.473243Z"
    },
    "papermill": {
     "duration": 0.811246,
     "end_time": "2025-07-09T17:00:16.476337",
     "exception": false,
     "start_time": "2025-07-09T17:00:15.665091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4e592ffc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T17:00:17.477448Z",
     "iopub.status.busy": "2025-07-09T17:00:17.477109Z",
     "iopub.status.idle": "2025-07-09T17:00:17.683806Z",
     "shell.execute_reply": "2025-07-09T17:00:17.682847Z"
    },
    "papermill": {
     "duration": 0.746356,
     "end_time": "2025-07-09T17:00:17.685333",
     "exception": false,
     "start_time": "2025-07-09T17:00:16.938977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['AUC'])\n",
    "plt.plot(history.history['val_AUC'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 862157,
     "sourceId": 11848,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3587.010691,
   "end_time": "2025-07-09T17:00:20.885686",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-09T16:00:33.874995",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
