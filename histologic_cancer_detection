{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca39c0c7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-07T08:14:32.393330Z",
     "iopub.status.busy": "2025-07-07T08:14:32.393115Z",
     "iopub.status.idle": "2025-07-07T08:14:33.762688Z",
     "shell.execute_reply": "2025-07-07T08:14:33.761906Z"
    },
    "papermill": {
     "duration": 1.375395,
     "end_time": "2025-07-07T08:14:33.763850",
     "exception": false,
     "start_time": "2025-07-07T08:14:32.388455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['histopathologic-cancer-detection']\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "#for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#    for filename in filenames:\n",
    "#        print(os.path.join(dirname, filename))\n",
    "print(os.listdir(\"../input\"))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1661b86c",
   "metadata": {
    "papermill": {
     "duration": 0.003419,
     "end_time": "2025-07-07T08:14:33.771187",
     "exception": false,
     "start_time": "2025-07-07T08:14:33.767768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Libraries**\n",
    "\n",
    "In general i like to load libraries \"on the go\" as this makes the code more understandable, therefore i will only load the most used libraries here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4fc81618",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:14:33.778596Z",
     "iopub.status.busy": "2025-07-07T08:14:33.778289Z",
     "iopub.status.idle": "2025-07-07T08:14:33.781624Z",
     "shell.execute_reply": "2025-07-07T08:14:33.780932Z"
    },
    "papermill": {
     "duration": 0.008181,
     "end_time": "2025-07-07T08:14:33.782688",
     "exception": false,
     "start_time": "2025-07-07T08:14:33.774507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#import keras\n",
    "import matplotlib.pyplot as plt\n",
    "#import tensorflow as tf\n",
    "#from tensorflow import keras\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10b39466",
   "metadata": {
    "papermill": {
     "duration": 0.003062,
     "end_time": "2025-07-07T08:14:33.789028",
     "exception": false,
     "start_time": "2025-07-07T08:14:33.785966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6e54a561",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:14:33.796540Z",
     "iopub.status.busy": "2025-07-07T08:14:33.795984Z",
     "iopub.status.idle": "2025-07-07T08:14:34.111578Z",
     "shell.execute_reply": "2025-07-07T08:14:34.110666Z"
    },
    "papermill": {
     "duration": 0.32136,
     "end_time": "2025-07-07T08:14:34.113548",
     "exception": false,
     "start_time": "2025-07-07T08:14:33.792188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_labels = pd.read_csv(\"/kaggle/input/histopathologic-cancer-detection/train_labels.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7b36b46",
   "metadata": {
    "papermill": {
     "duration": 0.004286,
     "end_time": "2025-07-07T08:14:34.122426",
     "exception": false,
     "start_time": "2025-07-07T08:14:34.118140",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection\n",
    "\n",
    "Let us get a first view on the dataset and how it is structured"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb870c4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:14:34.132369Z",
     "iopub.status.busy": "2025-07-07T08:14:34.132096Z",
     "iopub.status.idle": "2025-07-07T08:14:34.146042Z",
     "shell.execute_reply": "2025-07-07T08:14:34.145207Z"
    },
    "papermill": {
     "duration": 0.019588,
     "end_time": "2025-07-07T08:14:34.147410",
     "exception": false,
     "start_time": "2025-07-07T08:14:34.127822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lets look at the first rows: \n",
      "                                         id  label\n",
      "0  f38a6374c348f90b587e046aac6079959adf3835      0\n",
      "1  c18f2d887b7ae4f6742ee445113fa1aef383ed77      1\n",
      "2  755db6279dae599ebb4d39a9123cce439965282d      0\n",
      "3  bc3f0c64fb968ff4a8bd33af6971ecae77c75e08      0\n",
      "4  068aba587a4950175d04c680d38943fd488d6a9d      0\n"
     ]
    }
   ],
   "source": [
    "print(\"Lets look at the first rows: \")\n",
    "print(train_labels.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "66ec89e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:14:34.156669Z",
     "iopub.status.busy": "2025-07-07T08:14:34.156463Z",
     "iopub.status.idle": "2025-07-07T08:15:56.040420Z",
     "shell.execute_reply": "2025-07-07T08:15:56.039606Z"
    },
    "papermill": {
     "duration": 81.889795,
     "end_time": "2025-07-07T08:15:56.041801",
     "exception": false,
     "start_time": "2025-07-07T08:14:34.152006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "\n",
    "mypath = \"/kaggle/input/histopathologic-cancer-detection/train\" \n",
    "\n",
    "# read in all the files\n",
    "\n",
    "files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "file_list = listdir(mypath)\n",
    "\n",
    "for file in range(10000):  #file_list\n",
    "    \n",
    "    current_file_path = join(mypath, file_list[file])\n",
    "\n",
    "    if isfile(current_file_path):\n",
    "        img = plt.imread(current_file_path)\n",
    "        new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "        new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "        files.loc[len(files)] = [new_file_path, img]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "276d3133",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:15:56.049863Z",
     "iopub.status.busy": "2025-07-07T08:15:56.049657Z",
     "iopub.status.idle": "2025-07-07T08:15:56.120779Z",
     "shell.execute_reply": "2025-07-07T08:15:56.120193Z"
    },
    "papermill": {
     "duration": 0.076283,
     "end_time": "2025-07-07T08:15:56.121942",
     "exception": false,
     "start_time": "2025-07-07T08:15:56.045659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "complete_files = pd.merge(files,train_labels, on = \"id\" ).drop(columns = [\"id\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "307161d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:15:56.129546Z",
     "iopub.status.busy": "2025-07-07T08:15:56.129352Z",
     "iopub.status.idle": "2025-07-07T08:15:59.291412Z",
     "shell.execute_reply": "2025-07-07T08:15:59.290499Z"
    },
    "papermill": {
     "duration": 3.167173,
     "end_time": "2025-07-07T08:15:59.292654",
     "exception": false,
     "start_time": "2025-07-07T08:15:56.125481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                          image_data  label\n",
      "0  [[[241, 246, 250], [255, 251, 255], [246, 221,...      1\n",
      "1  [[[221, 214, 222], [221, 214, 222], [221, 214,...      0\n",
      "2  [[[231, 214, 207], [245, 230, 227], [230, 214,...      0\n",
      "3  [[[74, 20, 52], [189, 138, 169], [153, 107, 13...      1\n",
      "4  [[[129, 71, 158], [154, 92, 177], [144, 81, 16...      1\n"
     ]
    }
   ],
   "source": [
    "print(complete_files.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7d3955f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:15:59.300605Z",
     "iopub.status.busy": "2025-07-07T08:15:59.300390Z",
     "iopub.status.idle": "2025-07-07T08:15:59.304728Z",
     "shell.execute_reply": "2025-07-07T08:15:59.304023Z"
    },
    "papermill": {
     "duration": 0.009438,
     "end_time": "2025-07-07T08:15:59.305729",
     "exception": false,
     "start_time": "2025-07-07T08:15:59.296291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "complete_files = complete_files.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d438e66",
   "metadata": {
    "papermill": {
     "duration": 0.003695,
     "end_time": "2025-07-07T08:15:59.312763",
     "exception": false,
     "start_time": "2025-07-07T08:15:59.309068",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data can be saved as described here:\n",
    "https://www.kaggle.com/code/nicholasdunham/saving-and-persisting-data-in-kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0bd2362c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:15:59.319862Z",
     "iopub.status.busy": "2025-07-07T08:15:59.319668Z",
     "iopub.status.idle": "2025-07-07T08:15:59.322906Z",
     "shell.execute_reply": "2025-07-07T08:15:59.322266Z"
    },
    "papermill": {
     "duration": 0.008033,
     "end_time": "2025-07-07T08:15:59.323999",
     "exception": false,
     "start_time": "2025-07-07T08:15:59.315966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from tempfile import TemporaryFile\n",
    "# go to kaggle/working to store file\n",
    "\n",
    "#np.save(\"numpy_array_final\", complete_files)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0d0360a",
   "metadata": {
    "papermill": {
     "duration": 0.003268,
     "end_time": "2025-07-07T08:15:59.330572",
     "exception": false,
     "start_time": "2025-07-07T08:15:59.327304",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection and Cleaning\n",
    "\n",
    "to be continued"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "489815ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:15:59.337997Z",
     "iopub.status.busy": "2025-07-07T08:15:59.337492Z",
     "iopub.status.idle": "2025-07-07T08:15:59.341325Z",
     "shell.execute_reply": "2025-07-07T08:15:59.340671Z"
    },
    "papermill": {
     "duration": 0.008549,
     "end_time": "2025-07-07T08:15:59.342337",
     "exception": false,
     "start_time": "2025-07-07T08:15:59.333788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The image shape is: (96, 96, 3)\n"
     ]
    }
   ],
   "source": [
    "print(\"The image shape is:\", complete_files[:,0][0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "52ff6a91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:15:59.349832Z",
     "iopub.status.busy": "2025-07-07T08:15:59.349644Z",
     "iopub.status.idle": "2025-07-07T08:15:59.556852Z",
     "shell.execute_reply": "2025-07-07T08:15:59.556146Z"
    },
    "papermill": {
     "duration": 0.212509,
     "end_time": "2025-07-07T08:15:59.558257",
     "exception": false,
     "start_time": "2025-07-07T08:15:59.345748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7972a441f750>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(complete_files[:,0][0].astype(\"uint8\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a52e63ca",
   "metadata": {
    "papermill": {
     "duration": 0.004095,
     "end_time": "2025-07-07T08:15:59.567013",
     "exception": false,
     "start_time": "2025-07-07T08:15:59.562918",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prepare Data\n",
    "\n",
    "Insturctions here:\n",
    "https://www.tensorflow.org/guide/keras/preprocessing_layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "826d7be9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:15:59.576140Z",
     "iopub.status.busy": "2025-07-07T08:15:59.575935Z",
     "iopub.status.idle": "2025-07-07T08:16:03.147717Z",
     "shell.execute_reply": "2025-07-07T08:16:03.147111Z"
    },
    "papermill": {
     "duration": 3.577913,
     "end_time": "2025-07-07T08:16:03.149056",
     "exception": false,
     "start_time": "2025-07-07T08:15:59.571143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# make values to be in range of 0-1\n",
    "x_train = (complete_files[:,0] / 255) - 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11569aac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:16:03.158916Z",
     "iopub.status.busy": "2025-07-07T08:16:03.158710Z",
     "iopub.status.idle": "2025-07-07T08:16:03.810630Z",
     "shell.execute_reply": "2025-07-07T08:16:03.810040Z"
    },
    "papermill": {
     "duration": 0.658286,
     "end_time": "2025-07-07T08:16:03.812044",
     "exception": false,
     "start_time": "2025-07-07T08:16:03.153758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# numpy was a series of array with stack this can be undone\n",
    "X = np.stack(x_train, axis = 0)\n",
    "y = complete_files[:,1] #.astype(\"float64\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "332261e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:16:03.822235Z",
     "iopub.status.busy": "2025-07-07T08:16:03.822022Z",
     "iopub.status.idle": "2025-07-07T08:16:05.355500Z",
     "shell.execute_reply": "2025-07-07T08:16:05.354650Z"
    },
    "papermill": {
     "duration": 1.54018,
     "end_time": "2025-07-07T08:16:05.356911",
     "exception": false,
     "start_time": "2025-07-07T08:16:03.816731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4790)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "50ccfafb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:16:05.366543Z",
     "iopub.status.busy": "2025-07-07T08:16:05.366168Z",
     "iopub.status.idle": "2025-07-07T08:16:21.852763Z",
     "shell.execute_reply": "2025-07-07T08:16:21.851848Z"
    },
    "papermill": {
     "duration": 16.492616,
     "end_time": "2025-07-07T08:16:21.854039",
     "exception": false,
     "start_time": "2025-07-07T08:16:05.361423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-07 08:16:06.816380: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1751876166.996919      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1751876167.048033      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "I0000 00:00:1751876179.525050      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1751876179.525695      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8000, 96, 96, 3)\n",
      "(8000,)\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "X_train = tf.convert_to_tensor(X_train)\n",
    "#y_train = tf.convert_to_tensor(y_train)\n",
    "X_test = tf.convert_to_tensor(X_test)\n",
    "#y_test = tf.convert_to_tensor(y_test)\n",
    "print(X_train.shape)\n",
    "print(y_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b81d41f1",
   "metadata": {
    "papermill": {
     "duration": 0.00431,
     "end_time": "2025-07-07T08:16:21.863067",
     "exception": false,
     "start_time": "2025-07-07T08:16:21.858757",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train the first model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "aca8d4fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:16:21.872776Z",
     "iopub.status.busy": "2025-07-07T08:16:21.872332Z",
     "iopub.status.idle": "2025-07-07T08:16:23.071390Z",
     "shell.execute_reply": "2025-07-07T08:16:23.070772Z"
    },
    "papermill": {
     "duration": 1.205332,
     "end_time": "2025-07-07T08:16:23.072723",
     "exception": false,
     "start_time": "2025-07-07T08:16:21.867391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten\n",
    "\n",
    "num_filters = 3\n",
    "filter_size = 3\n",
    "pool_size = 2\n",
    "input_shape = (96,96,3)\n",
    "\n",
    "model = Sequential([\n",
    "  Conv2D(num_filters, filter_size, input_shape=(96,96,3)),\n",
    "  MaxPooling2D(pool_size=pool_size),\n",
    "  Flatten(),\n",
    "  Dense(2, activation='sigmoid'),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "928eb40d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:16:23.083112Z",
     "iopub.status.busy": "2025-07-07T08:16:23.082563Z",
     "iopub.status.idle": "2025-07-07T08:16:23.086460Z",
     "shell.execute_reply": "2025-07-07T08:16:23.085694Z"
    },
    "papermill": {
     "duration": 0.009981,
     "end_time": "2025-07-07T08:16:23.087572",
     "exception": false,
     "start_time": "2025-07-07T08:16:23.077591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Sequential name=sequential, built=True>\n"
     ]
    }
   ],
   "source": [
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "358f09ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:16:23.097093Z",
     "iopub.status.busy": "2025-07-07T08:16:23.096915Z",
     "iopub.status.idle": "2025-07-07T08:16:23.108255Z",
     "shell.execute_reply": "2025-07-07T08:16:23.107554Z"
    },
    "papermill": {
     "duration": 0.017408,
     "end_time": "2025-07-07T08:16:23.109313",
     "exception": false,
     "start_time": "2025-07-07T08:16:23.091905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(\n",
    "  'adam',\n",
    "  loss='categorical_crossentropy',\n",
    "  metrics=['accuracy'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b5c83169",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T08:16:23.118953Z",
     "iopub.status.busy": "2025-07-07T08:16:23.118748Z",
     "iopub.status.idle": "2025-07-07T08:17:01.492346Z",
     "shell.execute_reply": "2025-07-07T08:17:01.491739Z"
    },
    "papermill": {
     "duration": 38.379655,
     "end_time": "2025-07-07T08:17:01.493479",
     "exception": false,
     "start_time": "2025-07-07T08:16:23.113824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1751876184.594718      62 service.cc:148] XLA service 0x79704002b8c0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1751876184.595361      62 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1751876184.595386      62 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1751876184.759927      62 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m 47/250\u001b[0m \u001b[32m━━━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5830 - loss: 0.7651"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1751876186.121643      62 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - accuracy: 0.6342 - loss: 0.6734 - val_accuracy: 0.7150 - val_loss: 0.5947\n",
      "Epoch 2/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.7254 - loss: 0.5561 - val_accuracy: 0.7300 - val_loss: 0.5653\n",
      "Epoch 3/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.7588 - loss: 0.5168 - val_accuracy: 0.7300 - val_loss: 0.5630\n",
      "Epoch 4/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.7826 - loss: 0.4820 - val_accuracy: 0.7130 - val_loss: 0.5842\n",
      "Epoch 5/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.7993 - loss: 0.4574 - val_accuracy: 0.7225 - val_loss: 0.5996\n",
      "Epoch 6/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.8165 - loss: 0.4273 - val_accuracy: 0.7090 - val_loss: 0.6117\n",
      "Epoch 7/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8239 - loss: 0.4067 - val_accuracy: 0.7090 - val_loss: 0.6292\n",
      "Epoch 8/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8442 - loss: 0.3827 - val_accuracy: 0.6705 - val_loss: 0.6781\n",
      "Epoch 9/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8527 - loss: 0.3681 - val_accuracy: 0.6780 - val_loss: 0.6810\n",
      "Epoch 10/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8654 - loss: 0.3475 - val_accuracy: 0.6800 - val_loss: 0.6990\n",
      "Epoch 11/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.8697 - loss: 0.3229 - val_accuracy: 0.6650 - val_loss: 0.7696\n",
      "Epoch 12/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8842 - loss: 0.3080 - val_accuracy: 0.6775 - val_loss: 0.7539\n",
      "Epoch 13/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9064 - loss: 0.2813 - val_accuracy: 0.6710 - val_loss: 0.8029\n",
      "Epoch 14/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8990 - loss: 0.2749 - val_accuracy: 0.6570 - val_loss: 0.8335\n",
      "Epoch 15/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9095 - loss: 0.2577 - val_accuracy: 0.6750 - val_loss: 0.8546\n",
      "Epoch 16/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9154 - loss: 0.2565 - val_accuracy: 0.6740 - val_loss: 0.8860\n",
      "Epoch 17/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9280 - loss: 0.2252 - val_accuracy: 0.6670 - val_loss: 0.9230\n",
      "Epoch 18/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9288 - loss: 0.2168 - val_accuracy: 0.6465 - val_loss: 0.9753\n",
      "Epoch 19/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9344 - loss: 0.2105 - val_accuracy: 0.6590 - val_loss: 0.9903\n",
      "Epoch 20/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9444 - loss: 0.1916 - val_accuracy: 0.6575 - val_loss: 1.0219\n",
      "Epoch 21/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9492 - loss: 0.1775 - val_accuracy: 0.6555 - val_loss: 1.0756\n",
      "Epoch 22/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9567 - loss: 0.1695 - val_accuracy: 0.6455 - val_loss: 1.1313\n",
      "Epoch 23/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9571 - loss: 0.1620 - val_accuracy: 0.6365 - val_loss: 1.1804\n",
      "Epoch 24/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9635 - loss: 0.1511 - val_accuracy: 0.6470 - val_loss: 1.1841\n",
      "Epoch 25/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9666 - loss: 0.1436 - val_accuracy: 0.6505 - val_loss: 1.2344\n",
      "Epoch 26/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9699 - loss: 0.1367 - val_accuracy: 0.6525 - val_loss: 1.3107\n",
      "Epoch 27/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9687 - loss: 0.1344 - val_accuracy: 0.6550 - val_loss: 1.3178\n",
      "Epoch 28/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9729 - loss: 0.1206 - val_accuracy: 0.6535 - val_loss: 1.3569\n",
      "Epoch 29/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9704 - loss: 0.1223 - val_accuracy: 0.6450 - val_loss: 1.4010\n",
      "Epoch 30/30\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9813 - loss: 0.1044 - val_accuracy: 0.6270 - val_loss: 1.4721\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x79720f2f2350>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "model.fit(\n",
    "  X_train,\n",
    "  to_categorical(y_train),\n",
    "  epochs=30,\n",
    "  validation_data=(X_test, to_categorical(y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80d86979",
   "metadata": {
    "papermill": {
     "duration": 0.027399,
     "end_time": "2025-07-07T08:17:01.549302",
     "exception": false,
     "start_time": "2025-07-07T08:17:01.521903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 862157,
     "sourceId": 11848,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 157.275982,
   "end_time": "2025-07-07T08:17:05.550622",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-07T08:14:28.274640",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
