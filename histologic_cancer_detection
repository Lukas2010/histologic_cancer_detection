{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d4bbbaf2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-10T07:36:46.227770Z",
     "iopub.status.busy": "2025-07-10T07:36:46.227228Z",
     "iopub.status.idle": "2025-07-10T07:36:47.604061Z",
     "shell.execute_reply": "2025-07-10T07:36:47.603214Z"
    },
    "papermill": {
     "duration": 1.383921,
     "end_time": "2025-07-10T07:36:47.605427",
     "exception": false,
     "start_time": "2025-07-10T07:36:46.221506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['histopathologic-cancer-detection']\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "#for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#    for filename in filenames:\n",
    "#        print(os.path.join(dirname, filename))\n",
    "print(os.listdir(\"../input\"))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83b5064b",
   "metadata": {
    "papermill": {
     "duration": 0.004102,
     "end_time": "2025-07-10T07:36:47.614182",
     "exception": false,
     "start_time": "2025-07-10T07:36:47.610080",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Libraries**\n",
    "\n",
    "In general i like to load libraries \"on the go\" as this makes the code more understandable, therefore i will only load the most used libraries here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e5916255",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:36:47.623317Z",
     "iopub.status.busy": "2025-07-10T07:36:47.622600Z",
     "iopub.status.idle": "2025-07-10T07:37:01.573063Z",
     "shell.execute_reply": "2025-07-10T07:37:01.572217Z"
    },
    "papermill": {
     "duration": 13.956621,
     "end_time": "2025-07-10T07:37:01.574681",
     "exception": false,
     "start_time": "2025-07-10T07:36:47.618060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-10 07:36:49.051631: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752133009.242041      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752133009.301113      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "#from tensorflow import keras\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f194b78c",
   "metadata": {
    "papermill": {
     "duration": 0.00402,
     "end_time": "2025-07-10T07:37:01.583266",
     "exception": false,
     "start_time": "2025-07-10T07:37:01.579246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13d9cfdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:37:01.593003Z",
     "iopub.status.busy": "2025-07-10T07:37:01.592015Z",
     "iopub.status.idle": "2025-07-10T07:37:01.963929Z",
     "shell.execute_reply": "2025-07-10T07:37:01.963280Z"
    },
    "papermill": {
     "duration": 0.37814,
     "end_time": "2025-07-10T07:37:01.965422",
     "exception": false,
     "start_time": "2025-07-10T07:37:01.587282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_labels = pd.read_csv(\"/kaggle/input/histopathologic-cancer-detection/train_labels.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edcbac01",
   "metadata": {
    "papermill": {
     "duration": 0.004105,
     "end_time": "2025-07-10T07:37:01.973928",
     "exception": false,
     "start_time": "2025-07-10T07:37:01.969823",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection\n",
    "\n",
    "Let us get a first view on the dataset and how it is structured"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "30123011",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:37:01.983153Z",
     "iopub.status.busy": "2025-07-10T07:37:01.982875Z",
     "iopub.status.idle": "2025-07-10T07:37:01.993886Z",
     "shell.execute_reply": "2025-07-10T07:37:01.992898Z"
    },
    "papermill": {
     "duration": 0.017167,
     "end_time": "2025-07-10T07:37:01.995091",
     "exception": false,
     "start_time": "2025-07-10T07:37:01.977924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lets look at the first rows: \n",
      "                                         id  label\n",
      "0  f38a6374c348f90b587e046aac6079959adf3835      0\n",
      "1  c18f2d887b7ae4f6742ee445113fa1aef383ed77      1\n",
      "2  755db6279dae599ebb4d39a9123cce439965282d      0\n",
      "3  bc3f0c64fb968ff4a8bd33af6971ecae77c75e08      0\n",
      "4  068aba587a4950175d04c680d38943fd488d6a9d      0\n"
     ]
    }
   ],
   "source": [
    "print(\"Lets look at the first rows: \")\n",
    "print(train_labels.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e1cfd8fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:37:02.004049Z",
     "iopub.status.busy": "2025-07-10T07:37:02.003802Z",
     "iopub.status.idle": "2025-07-10T07:37:02.123052Z",
     "shell.execute_reply": "2025-07-10T07:37:02.122471Z"
    },
    "papermill": {
     "duration": 0.125088,
     "end_time": "2025-07-10T07:37:02.124186",
     "exception": false,
     "start_time": "2025-07-10T07:37:01.999098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "from keras.utils import to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "def getfiles(path, max_length):\n",
    "    files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "    file_list = listdir(path)\n",
    "\n",
    "    for file in range(0,max_length,10):  #file_list (0,50000,5)\n",
    "        \n",
    "        current_file_path = join(mypath, file_list[file])\n",
    "    \n",
    "        if isfile(current_file_path):\n",
    "            img = plt.imread(current_file_path)\n",
    "            if file % 5 == 0:\n",
    "                img = np.flipud(img)\n",
    "            elif file % 7 == 0:\n",
    "                img = np.rot90(img)\n",
    "            elif file % 9 == 0:\n",
    "                img = np.fliplr(img)\n",
    "            \n",
    "            new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "            new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "            files.loc[len(files)] = [new_file_path, img]\n",
    "\n",
    "    complete_files = pd.merge(files,train_labels, how = \"left\",on = \"id\" ).drop(columns = [\"id\"])\n",
    "    complete_files = complete_files.to_numpy()\n",
    "    complete_files[:,0] = complete_files[:,0] / 255\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(np.stack(complete_files[:,0], axis = 0), \n",
    "                                                        complete_files[:,1], test_size=0.2, random_state=4790)\n",
    "    \n",
    "    return X_train, X_test, y_train.astype(\"float32\"), y_test.astype(\"float32\") #tf.data.Dataset.from_tensor_slices((np.stack(complete_files[:,0], axis = 0),label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95a3a3b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T19:49:32.931084Z",
     "iopub.status.busy": "2025-07-08T19:49:32.930719Z",
     "iopub.status.idle": "2025-07-08T19:49:32.939368Z",
     "shell.execute_reply": "2025-07-08T19:49:32.938276Z",
     "shell.execute_reply.started": "2025-07-08T19:49:32.931063Z"
    },
    "papermill": {
     "duration": 0.003879,
     "end_time": "2025-07-10T07:37:02.132225",
     "exception": false,
     "start_time": "2025-07-10T07:37:02.128346",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "complete_files[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1fa8cf6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:37:02.141544Z",
     "iopub.status.busy": "2025-07-10T07:37:02.141341Z",
     "iopub.status.idle": "2025-07-10T07:41:05.040899Z",
     "shell.execute_reply": "2025-07-10T07:41:05.040212Z"
    },
    "papermill": {
     "duration": 242.905676,
     "end_time": "2025-07-10T07:41:05.042456",
     "exception": false,
     "start_time": "2025-07-10T07:37:02.136780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mypath = \"/kaggle/input/histopathologic-cancer-detection/train\"\n",
    "X_train, X_test, y_train, y_test = getfiles(path = mypath, max_length = 200000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d8400e",
   "metadata": {
    "papermill": {
     "duration": 0.003958,
     "end_time": "2025-07-10T07:41:05.051060",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.047102",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "check for NAs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4771a40",
   "metadata": {
    "papermill": {
     "duration": 0.003835,
     "end_time": "2025-07-10T07:41:05.058882",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.055047",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "https://www.tensorflow.org/tutorials/load_data/images\n",
    "\n",
    "To Do\n",
    "- add poo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd089e10",
   "metadata": {
    "papermill": {
     "duration": 0.003782,
     "end_time": "2025-07-10T07:41:05.066534",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.062752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data can be saved as described here:\n",
    "https://www.kaggle.com/code/nicholasdunham/saving-and-persisting-data-in-kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6eedbdbb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:41:05.075421Z",
     "iopub.status.busy": "2025-07-10T07:41:05.075212Z",
     "iopub.status.idle": "2025-07-10T07:41:05.078322Z",
     "shell.execute_reply": "2025-07-10T07:41:05.077782Z"
    },
    "papermill": {
     "duration": 0.008795,
     "end_time": "2025-07-10T07:41:05.079298",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.070503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from tempfile import TemporaryFile\n",
    "# go to kaggle/working to store file\n",
    "\n",
    "#np.save(\"numpy_array_final\", complete_files)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f8450ae",
   "metadata": {
    "papermill": {
     "duration": 0.003992,
     "end_time": "2025-07-10T07:41:05.087458",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.083466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection and Cleaning\n",
    "\n",
    "to be continued"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edb67e28",
   "metadata": {
    "papermill": {
     "duration": 0.00384,
     "end_time": "2025-07-10T07:41:05.095248",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.091408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"The image shape is:\", complete_files[:,0][0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8632296",
   "metadata": {
    "papermill": {
     "duration": 0.003822,
     "end_time": "2025-07-10T07:41:05.103079",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.099257",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "plt.imshow(complete_files[:,0][0].astype(\"uint8\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bf2cdfc",
   "metadata": {
    "papermill": {
     "duration": 0.003931,
     "end_time": "2025-07-10T07:41:05.111009",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.107078",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prepare Data\n",
    "\n",
    "Insturctions here:\n",
    "https://www.tensorflow.org/guide/keras/preprocessing_layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4aeeedc",
   "metadata": {
    "papermill": {
     "duration": 0.003798,
     "end_time": "2025-07-10T07:41:05.118784",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.114986",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train the first model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2137dedb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:41:05.128369Z",
     "iopub.status.busy": "2025-07-10T07:41:05.128163Z",
     "iopub.status.idle": "2025-07-10T07:41:05.184179Z",
     "shell.execute_reply": "2025-07-10T07:41:05.183645Z"
    },
    "papermill": {
     "duration": 0.062016,
     "end_time": "2025-07-10T07:41:05.185279",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.123263",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization\n",
    "from tensorflow.keras import layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "518238c7",
   "metadata": {
    "papermill": {
     "duration": 0.003962,
     "end_time": "2025-07-10T07:41:05.193315",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.189353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 5\n",
    "filter_size = 3\n",
    "pool_size = 2\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(2, activation='sigmoid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ee9d9f84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:41:05.202236Z",
     "iopub.status.busy": "2025-07-10T07:41:05.202037Z",
     "iopub.status.idle": "2025-07-10T07:41:07.584524Z",
     "shell.execute_reply": "2025-07-10T07:41:07.583962Z"
    },
    "papermill": {
     "duration": 2.388392,
     "end_time": "2025-07-10T07:41:07.585739",
     "exception": false,
     "start_time": "2025-07-10T07:41:05.197347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "I0000 00:00:1752133266.188982      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 15\n",
    "filter_size = 3\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('tanh'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('tanh'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('tanh'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('tanh'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(32, activation = \"tanh\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(16, activation = \"tanh\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(8, activation = \"tanh\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d636e4ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:41:07.595761Z",
     "iopub.status.busy": "2025-07-10T07:41:07.595086Z",
     "iopub.status.idle": "2025-07-10T07:41:07.622336Z",
     "shell.execute_reply": "2025-07-10T07:41:07.621740Z"
    },
    "papermill": {
     "duration": 0.033663,
     "end_time": "2025-07-10T07:41:07.623967",
     "exception": false,
     "start_time": "2025-07-10T07:41:07.590304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">420</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">47</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">47</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">22</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">22</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">240</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">7,712</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │             \u001b[38;5;34m420\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (\u001b[38;5;33mActivation\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m47\u001b[0m, \u001b[38;5;34m47\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m22\u001b[0m, \u001b[38;5;34m22\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_2 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_3 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m240\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m7,712\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_4 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │             \u001b[38;5;34m528\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │             \u001b[38;5;34m136\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_6 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m9\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">15,165</span> (59.24 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m15,165\u001b[0m (59.24 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">15,045</span> (58.77 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m15,045\u001b[0m (58.77 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">120</span> (480.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m120\u001b[0m (480.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d5d76d43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:41:07.635177Z",
     "iopub.status.busy": "2025-07-10T07:41:07.634549Z",
     "iopub.status.idle": "2025-07-10T07:41:07.646066Z",
     "shell.execute_reply": "2025-07-10T07:41:07.645365Z"
    },
    "papermill": {
     "duration": 0.018004,
     "end_time": "2025-07-10T07:41:07.647160",
     "exception": false,
     "start_time": "2025-07-10T07:41:07.629156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "opt = keras.optimizers.Adam(learning_rate=0.0001)\n",
    "\n",
    "model.compile(\n",
    "  optimizer=opt,\n",
    "  loss='binary_crossentropy',\n",
    "  metrics=['AUC'], # AUC ?\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ba041012",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:41:07.657966Z",
     "iopub.status.busy": "2025-07-10T07:41:07.657587Z",
     "iopub.status.idle": "2025-07-10T07:42:20.889338Z",
     "shell.execute_reply": "2025-07-10T07:42:20.888723Z"
    },
    "papermill": {
     "duration": 73.238572,
     "end_time": "2025-07-10T07:42:20.890618",
     "exception": false,
     "start_time": "2025-07-10T07:41:07.652046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1752133278.257138      57 service.cc:148] XLA service 0x79e4c003ae00 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1752133278.258085      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1752133278.860129      57 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m 25/500\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - AUC: 0.5153 - loss: 0.8010"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752133284.911218      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 12ms/step - AUC: 0.6604 - loss: 0.6533 - val_AUC: 0.7921 - val_loss: 0.6466\n",
      "Epoch 2/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.7782 - loss: 0.5600 - val_AUC: 0.8231 - val_loss: 0.5360\n",
      "Epoch 3/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8039 - loss: 0.5276 - val_AUC: 0.8274 - val_loss: 0.5930\n",
      "Epoch 4/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8132 - loss: 0.5150 - val_AUC: 0.8439 - val_loss: 0.8584\n",
      "Epoch 5/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8328 - loss: 0.4906 - val_AUC: 0.8397 - val_loss: 0.8153\n",
      "Epoch 6/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8425 - loss: 0.4798 - val_AUC: 0.8496 - val_loss: 0.8033\n",
      "Epoch 7/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8471 - loss: 0.4685 - val_AUC: 0.8575 - val_loss: 0.8474\n",
      "Epoch 8/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8570 - loss: 0.4561 - val_AUC: 0.8695 - val_loss: 0.6117\n",
      "Epoch 9/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8556 - loss: 0.4581 - val_AUC: 0.8728 - val_loss: 0.6574\n",
      "Epoch 10/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8563 - loss: 0.4562 - val_AUC: 0.8689 - val_loss: 0.6781\n",
      "Epoch 11/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8624 - loss: 0.4501 - val_AUC: 0.8721 - val_loss: 0.6968\n",
      "Epoch 12/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8653 - loss: 0.4455 - val_AUC: 0.8655 - val_loss: 0.7453\n",
      "Epoch 13/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8652 - loss: 0.4455 - val_AUC: 0.8827 - val_loss: 0.5463\n",
      "Epoch 14/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8618 - loss: 0.4477 - val_AUC: 0.8821 - val_loss: 0.5672\n",
      "Epoch 15/15\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - AUC: 0.8652 - loss: 0.4396 - val_AUC: 0.8699 - val_loss: 0.6306\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "history = model.fit(\n",
    "  X_train,\n",
    "  y_train,\n",
    "  epochs=15,\n",
    "  validation_data=(X_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0889b4fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:42:21.020890Z",
     "iopub.status.busy": "2025-07-10T07:42:21.020573Z",
     "iopub.status.idle": "2025-07-10T07:42:21.193353Z",
     "shell.execute_reply": "2025-07-10T07:42:21.192786Z"
    },
    "papermill": {
     "duration": 0.216884,
     "end_time": "2025-07-10T07:42:21.194811",
     "exception": false,
     "start_time": "2025-07-10T07:42:20.977927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5ab9ef98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:42:21.277757Z",
     "iopub.status.busy": "2025-07-10T07:42:21.277567Z",
     "iopub.status.idle": "2025-07-10T07:42:21.441401Z",
     "shell.execute_reply": "2025-07-10T07:42:21.440705Z"
    },
    "papermill": {
     "duration": 0.205634,
     "end_time": "2025-07-10T07:42:21.442565",
     "exception": false,
     "start_time": "2025-07-10T07:42:21.236931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['AUC'])\n",
    "plt.plot(history.history['val_AUC'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e5b5b7d",
   "metadata": {
    "papermill": {
     "duration": 0.041104,
     "end_time": "2025-07-10T07:42:21.526138",
     "exception": false,
     "start_time": "2025-07-10T07:42:21.485034",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Predict on new data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ab99c43",
   "metadata": {
    "execution": {
     "execution_failed": "2025-07-09T19:44:24.922Z"
    },
    "papermill": {
     "duration": 0.04274,
     "end_time": "2025-07-10T07:42:21.608821",
     "exception": false,
     "start_time": "2025-07-10T07:42:21.566081",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "def getfiles(path, max_length):\n",
    "    files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "    file_list = listdir(path)\n",
    "\n",
    "    for file in range(max_length):  #file_list (0,50000,5)\n",
    "        \n",
    "        current_file_path = join(mypath, file_list[file])\n",
    "    \n",
    "        if isfile(current_file_path):\n",
    "            img = plt.imread(current_file_path)\n",
    "            if file % 5 == 0:\n",
    "                img = np.flipud(img)\n",
    "            elif file % 7 == 0:\n",
    "                img = np.rot90(img)\n",
    "            elif file % 9 == 0:\n",
    "                img = np.fliplr(img)\n",
    "            \n",
    "            new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "            new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "            files.loc[len(files)] = [new_file_path, img]\n",
    "\n",
    "    complete_files = pd.merge(files,train_labels, how = \"left\",on = \"id\" ).drop(columns = [\"id\"])\n",
    "    complete_files = complete_files.to_numpy()\n",
    "    complete_files[:,0] = complete_files[:,0] / 255\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(np.stack(complete_files[:,0], axis = 0), \n",
    "                                                        complete_files[:,1], test_size=0.2, random_state=4790)\n",
    "    \n",
    "    return X_train, X_test, y_train.astype(\"float32\"), y_test.astype(\"float32\") #tf.data.Dataset.from_tensor_slices((np.stack(complete_files[:,0], axis = 0),label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "255e2ce9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:27:57.021209Z",
     "iopub.status.busy": "2025-07-09T20:27:57.020482Z",
     "iopub.status.idle": "2025-07-09T20:27:57.024920Z",
     "shell.execute_reply": "2025-07-09T20:27:57.023983Z",
     "shell.execute_reply.started": "2025-07-09T20:27:57.021186Z"
    },
    "papermill": {
     "duration": 0.039999,
     "end_time": "2025-07-10T07:42:21.689237",
     "exception": false,
     "start_time": "2025-07-10T07:42:21.649238",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "test_path = \"/kaggle/input/histopathologic-cancer-detection/test\"\n",
    "from glob import glob \n",
    "import cv2\n",
    "path = \"../input/\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61a14ad3",
   "metadata": {
    "papermill": {
     "duration": 0.039816,
     "end_time": "2025-07-10T07:42:21.768814",
     "exception": false,
     "start_time": "2025-07-10T07:42:21.728998",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#base_test_dir = path + 'test/'  #specify test data folder\n",
    "test_path = \"/kaggle/input/histopathologic-cancer-detection/test\"\n",
    "test_files  = listdir(test_path)\n",
    "#test_files = glob(os.path.join(base_test_dir,'*.tif')) #find the test file names\n",
    "submission = pd.DataFrame() #create a dataframe to hold results\n",
    "file_batch = 1000 #we will predict 5000 images at a time\n",
    "max_idx = len(test_files) #last index to use9*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7972a5f",
   "metadata": {
    "papermill": {
     "duration": 0.040073,
     "end_time": "2025-07-10T07:42:21.848565",
     "exception": false,
     "start_time": "2025-07-10T07:42:21.808492",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(max_idx)\n",
    "max_idx = 5000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1470a53a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:42:21.930847Z",
     "iopub.status.busy": "2025-07-10T07:42:21.930258Z",
     "iopub.status.idle": "2025-07-10T07:42:47.051435Z",
     "shell.execute_reply": "2025-07-10T07:42:47.050662Z"
    },
    "papermill": {
     "duration": 25.163541,
     "end_time": "2025-07-10T07:42:47.052653",
     "exception": false,
     "start_time": "2025-07-10T07:42:21.889112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a7ea26360815d8492433b14cd8318607bcf99d9e</td>\n",
       "      <td>0.091965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>59d21133c845dff1ebc7a0c7cf40c145ea9e9664</td>\n",
       "      <td>0.103481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5fde41ce8c6048a5c2f38eca12d6528fa312cdbb</td>\n",
       "      <td>0.089302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bd953a3b1db1f7041ee95ff482594c4f46c73ed0</td>\n",
       "      <td>0.092491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>523fc2efd7aba53e597ab0f69cc2cbded7a6ce62</td>\n",
       "      <td>0.112985</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         id     label\n",
       "0  a7ea26360815d8492433b14cd8318607bcf99d9e  0.091965\n",
       "1  59d21133c845dff1ebc7a0c7cf40c145ea9e9664  0.103481\n",
       "2  5fde41ce8c6048a5c2f38eca12d6528fa312cdbb  0.089302\n",
       "3  bd953a3b1db1f7041ee95ff482594c4f46c73ed0  0.092491\n",
       "4  523fc2efd7aba53e597ab0f69cc2cbded7a6ce62  0.112985"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import cv2\n",
    "from glob import glob \n",
    "\n",
    "base_test_dir = \"/kaggle/input/histopathologic-cancer-detection/\" + 'test/' #specify test data folder\n",
    "test_files = glob(os.path.join(base_test_dir,'*.tif')) #find the test file names\n",
    "submission = pd.DataFrame() #create a dataframe to hold results\n",
    "file_batch = 1000 #we will predict 5000 images at a time\n",
    "max_idx = 2000 #len(test_files) #last index to use\n",
    "for idx in range(0, max_idx, file_batch): #iterate over test image batches\n",
    "    #print(\"Indexes: %i - %i\"%(idx, idx+file_batch))\n",
    "    test_df = pd.DataFrame({'path': test_files[idx:idx+file_batch]}) #add the filenames to the dataframe\n",
    "    #print(test_df.path[0])\n",
    "    test_df['id'] = test_df.path.map(lambda x: x.split('/')[5].split(\".\")[0]) #add the ids to the dataframe\n",
    "    #print(test_df.id[0])\n",
    "    test_df['image'] = test_df['path'].map(cv2.imread) #read the batch\n",
    "    K_test = np.stack(test_df[\"image\"].values) #convert to numpy array\n",
    "    #print(K_test.shape)\n",
    "    \n",
    "    predictions = model.predict(K_test,verbose = 1) #predict the labels for the test data\n",
    "    #print(predictions)\n",
    "    test_df['label'] = predictions #store them in the dataframe\n",
    "    submission = pd.concat([submission, test_df[[\"id\", \"label\"]]])\n",
    "submission.head() #display first lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ff5f3410",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:42:47.135916Z",
     "iopub.status.busy": "2025-07-10T07:42:47.135652Z",
     "iopub.status.idle": "2025-07-10T07:42:47.141426Z",
     "shell.execute_reply": "2025-07-10T07:42:47.140528Z"
    },
    "papermill": {
     "duration": 0.04838,
     "end_time": "2025-07-10T07:42:47.142627",
     "exception": false,
     "start_time": "2025-07-10T07:42:47.094247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                           id     label\n",
      "0    a7ea26360815d8492433b14cd8318607bcf99d9e  0.091965\n",
      "1    59d21133c845dff1ebc7a0c7cf40c145ea9e9664  0.103481\n",
      "2    5fde41ce8c6048a5c2f38eca12d6528fa312cdbb  0.089302\n",
      "3    bd953a3b1db1f7041ee95ff482594c4f46c73ed0  0.092491\n",
      "4    523fc2efd7aba53e597ab0f69cc2cbded7a6ce62  0.112985\n",
      "..                                        ...       ...\n",
      "995  db662f829abedff109d92534f26c18c5e7b3eadd  0.088129\n",
      "996  c2852e69bc5986c45cc0d32c4c7f4835c3a5394c  0.068531\n",
      "997  3f1129fe0105bec64fddeec6a476921aa870d74f  0.106071\n",
      "998  e098eb5ad5969aaaca2b46eb985e0c0dbac31c4e  0.104125\n",
      "999  fb2e2daad67ad438be5c981df38f60c288451255  0.070525\n",
      "\n",
      "[2000 rows x 2 columns]\n",
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "print(submission)\n",
    "print(type(submission))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "78646d35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:42:47.225378Z",
     "iopub.status.busy": "2025-07-10T07:42:47.224779Z",
     "iopub.status.idle": "2025-07-10T07:42:47.228893Z",
     "shell.execute_reply": "2025-07-10T07:42:47.228118Z"
    },
    "papermill": {
     "duration": 0.046301,
     "end_time": "2025-07-10T07:42:47.229976",
     "exception": false,
     "start_time": "2025-07-10T07:42:47.183675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0664476603269577\n",
      "0.6812939643859863\n"
     ]
    }
   ],
   "source": [
    "print(submission.label.min(axis=0))\n",
    "print(submission.label.max(axis=0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "433e70ba",
   "metadata": {
    "papermill": {
     "duration": 0.04058,
     "end_time": "2025-07-10T07:42:47.311954",
     "exception": false,
     "start_time": "2025-07-10T07:42:47.271374",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "import cv2\n",
    "#base_test_dir = path + 'test/'  #specify test data folder\n",
    "#test_files = glob(os.path.join(base_test_dir,'*.tif')) #find the test file names\n",
    "#submission = pd.DataFrame() #create a dataframe to hold results\n",
    "#file_batch = 5000 #we will predict 5000 images at a time\n",
    "#max_idx = len(test_files) #last index to use\n",
    "for idx in range(0, max_idx, file_batch): #iterate over test image batches\n",
    "    print(\"Indexes: %i - %i\"%(idx, idx+file_batch))\n",
    "    test_df = pd.DataFrame({'path': test_files[idx:idx+file_batch]}) #add the filenames to the dataframe\n",
    "    print(test_df)\n",
    "    test_df['image'] = test_path + \"/\" + test_df['path'].map(cv2.imread)\n",
    "    test_df['id'] = test_df.path.map(lambda x: x.split('/')[3].split(\".\")[0]) #add the ids to the dataframe\n",
    "    # test_df['image'] = test_df['path'].map(cv2.imread) #read the batch\n",
    "    K_test = np.stack(test_df[\"image\"].values) #convert to numpy array\n",
    "    predictions = model.predict(K_test,verbose = 1) #predict the labels for the test data\n",
    "    test_df['label'] = predictions #store them in the dataframe\n",
    "    submission = pd.concat([submission, test_df[[\"id\", \"label\"]]])\n",
    "submission.head() #display first lines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc08fedf",
   "metadata": {
    "papermill": {
     "duration": 0.040541,
     "end_time": "2025-07-10T07:42:47.392800",
     "exception": false,
     "start_time": "2025-07-10T07:42:47.352259",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "submission.to_csv(\"submission.csv\", index = False, header = True) #create the submission file"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 862157,
     "sourceId": 11848,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 368.353401,
   "end_time": "2025-07-10T07:42:50.535655",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-10T07:36:42.182254",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
