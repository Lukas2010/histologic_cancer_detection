{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fb454d58",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-09T20:35:56.698572Z",
     "iopub.status.busy": "2025-07-09T20:35:56.697838Z",
     "iopub.status.idle": "2025-07-09T20:35:58.418481Z",
     "shell.execute_reply": "2025-07-09T20:35:58.417503Z"
    },
    "papermill": {
     "duration": 1.729143,
     "end_time": "2025-07-09T20:35:58.420308",
     "exception": false,
     "start_time": "2025-07-09T20:35:56.691165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['histopathologic-cancer-detection']\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "#for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#    for filename in filenames:\n",
    "#        print(os.path.join(dirname, filename))\n",
    "print(os.listdir(\"../input\"))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58c8e3fa",
   "metadata": {
    "papermill": {
     "duration": 0.006432,
     "end_time": "2025-07-09T20:35:58.434771",
     "exception": false,
     "start_time": "2025-07-09T20:35:58.428339",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Libraries**\n",
    "\n",
    "In general i like to load libraries \"on the go\" as this makes the code more understandable, therefore i will only load the most used libraries here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "609a4047",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:35:58.444355Z",
     "iopub.status.busy": "2025-07-09T20:35:58.443996Z",
     "iopub.status.idle": "2025-07-09T20:36:14.014453Z",
     "shell.execute_reply": "2025-07-09T20:36:14.013248Z"
    },
    "papermill": {
     "duration": 15.577253,
     "end_time": "2025-07-09T20:36:14.016179",
     "exception": false,
     "start_time": "2025-07-09T20:35:58.438926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-09 20:36:00.135990: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752093360.350989      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752093360.409809      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "#from tensorflow import keras\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95e3bb73",
   "metadata": {
    "papermill": {
     "duration": 0.004487,
     "end_time": "2025-07-09T20:36:14.025747",
     "exception": false,
     "start_time": "2025-07-09T20:36:14.021260",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ddfa0fa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:36:14.037086Z",
     "iopub.status.busy": "2025-07-09T20:36:14.035857Z",
     "iopub.status.idle": "2025-07-09T20:36:14.428984Z",
     "shell.execute_reply": "2025-07-09T20:36:14.427935Z"
    },
    "papermill": {
     "duration": 0.400116,
     "end_time": "2025-07-09T20:36:14.430613",
     "exception": false,
     "start_time": "2025-07-09T20:36:14.030497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_labels = pd.read_csv(\"/kaggle/input/histopathologic-cancer-detection/train_labels.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a3eb0cb",
   "metadata": {
    "papermill": {
     "duration": 0.004579,
     "end_time": "2025-07-09T20:36:14.440129",
     "exception": false,
     "start_time": "2025-07-09T20:36:14.435550",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection\n",
    "\n",
    "Let us get a first view on the dataset and how it is structured"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "da4b564b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:36:14.450291Z",
     "iopub.status.busy": "2025-07-09T20:36:14.449984Z",
     "iopub.status.idle": "2025-07-09T20:36:14.462500Z",
     "shell.execute_reply": "2025-07-09T20:36:14.461570Z"
    },
    "papermill": {
     "duration": 0.019142,
     "end_time": "2025-07-09T20:36:14.463689",
     "exception": false,
     "start_time": "2025-07-09T20:36:14.444547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lets look at the first rows: \n",
      "                                         id  label\n",
      "0  f38a6374c348f90b587e046aac6079959adf3835      0\n",
      "1  c18f2d887b7ae4f6742ee445113fa1aef383ed77      1\n",
      "2  755db6279dae599ebb4d39a9123cce439965282d      0\n",
      "3  bc3f0c64fb968ff4a8bd33af6971ecae77c75e08      0\n",
      "4  068aba587a4950175d04c680d38943fd488d6a9d      0\n"
     ]
    }
   ],
   "source": [
    "print(\"Lets look at the first rows: \")\n",
    "print(train_labels.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "19f7af98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:36:14.474471Z",
     "iopub.status.busy": "2025-07-09T20:36:14.473934Z",
     "iopub.status.idle": "2025-07-09T20:36:14.607589Z",
     "shell.execute_reply": "2025-07-09T20:36:14.606646Z"
    },
    "papermill": {
     "duration": 0.140605,
     "end_time": "2025-07-09T20:36:14.609165",
     "exception": false,
     "start_time": "2025-07-09T20:36:14.468560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "from keras.utils import to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "def getfiles(path, max_length):\n",
    "    files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "    file_list = listdir(path)\n",
    "\n",
    "    for file in range(max_length):  #file_list (0,50000,5)\n",
    "        \n",
    "        current_file_path = join(mypath, file_list[file])\n",
    "    \n",
    "        if isfile(current_file_path):\n",
    "            img = plt.imread(current_file_path)\n",
    "            if file % 5 == 0:\n",
    "                img = np.flipud(img)\n",
    "            elif file % 7 == 0:\n",
    "                img = np.rot90(img)\n",
    "            elif file % 9 == 0:\n",
    "                img = np.fliplr(img)\n",
    "            \n",
    "            new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "            new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "            files.loc[len(files)] = [new_file_path, img]\n",
    "\n",
    "    complete_files = pd.merge(files,train_labels, how = \"left\",on = \"id\" ).drop(columns = [\"id\"])\n",
    "    complete_files = complete_files.to_numpy()\n",
    "    complete_files[:,0] = complete_files[:,0] / 255\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(np.stack(complete_files[:,0], axis = 0), \n",
    "                                                        complete_files[:,1], test_size=0.2, random_state=4790)\n",
    "    \n",
    "    return X_train, X_test, y_train.astype(\"float32\"), y_test.astype(\"float32\") #tf.data.Dataset.from_tensor_slices((np.stack(complete_files[:,0], axis = 0),label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d463ea9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T19:49:32.931084Z",
     "iopub.status.busy": "2025-07-08T19:49:32.930719Z",
     "iopub.status.idle": "2025-07-08T19:49:32.939368Z",
     "shell.execute_reply": "2025-07-08T19:49:32.938276Z",
     "shell.execute_reply.started": "2025-07-08T19:49:32.931063Z"
    },
    "papermill": {
     "duration": 0.004234,
     "end_time": "2025-07-09T20:36:14.618176",
     "exception": false,
     "start_time": "2025-07-09T20:36:14.613942",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "complete_files[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7012f848",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:36:14.628811Z",
     "iopub.status.busy": "2025-07-09T20:36:14.628549Z",
     "iopub.status.idle": "2025-07-09T20:39:38.160149Z",
     "shell.execute_reply": "2025-07-09T20:39:38.159236Z"
    },
    "papermill": {
     "duration": 203.538576,
     "end_time": "2025-07-09T20:39:38.161704",
     "exception": false,
     "start_time": "2025-07-09T20:36:14.623128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mypath = \"/kaggle/input/histopathologic-cancer-detection/train\"\n",
    "X_train, X_test, y_train, y_test = getfiles(path = mypath, max_length = 20000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8cb949b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:39:38.172575Z",
     "iopub.status.busy": "2025-07-09T20:39:38.172310Z",
     "iopub.status.idle": "2025-07-09T20:39:38.177308Z",
     "shell.execute_reply": "2025-07-09T20:39:38.176389Z"
    },
    "papermill": {
     "duration": 0.011928,
     "end_time": "2025-07-09T20:39:38.178943",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.167015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 0. 1. ... 1. 1. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b095cd5",
   "metadata": {
    "papermill": {
     "duration": 0.004464,
     "end_time": "2025-07-09T20:39:38.188332",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.183868",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "check for NAs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b2efe21",
   "metadata": {
    "papermill": {
     "duration": 0.004522,
     "end_time": "2025-07-09T20:39:38.197772",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.193250",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "https://www.tensorflow.org/tutorials/load_data/images\n",
    "\n",
    "To Do\n",
    "- add poo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f933c2b",
   "metadata": {
    "papermill": {
     "duration": 0.004528,
     "end_time": "2025-07-09T20:39:38.207173",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.202645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data can be saved as described here:\n",
    "https://www.kaggle.com/code/nicholasdunham/saving-and-persisting-data-in-kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7d515f27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:39:38.218202Z",
     "iopub.status.busy": "2025-07-09T20:39:38.217763Z",
     "iopub.status.idle": "2025-07-09T20:39:38.221492Z",
     "shell.execute_reply": "2025-07-09T20:39:38.220825Z"
    },
    "papermill": {
     "duration": 0.010907,
     "end_time": "2025-07-09T20:39:38.222903",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.211996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from tempfile import TemporaryFile\n",
    "# go to kaggle/working to store file\n",
    "\n",
    "#np.save(\"numpy_array_final\", complete_files)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9d089e2",
   "metadata": {
    "papermill": {
     "duration": 0.004781,
     "end_time": "2025-07-09T20:39:38.232405",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.227624",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection and Cleaning\n",
    "\n",
    "to be continued"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d4083be",
   "metadata": {
    "papermill": {
     "duration": 0.004383,
     "end_time": "2025-07-09T20:39:38.241369",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.236986",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"The image shape is:\", complete_files[:,0][0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c4935f4",
   "metadata": {
    "papermill": {
     "duration": 0.004399,
     "end_time": "2025-07-09T20:39:38.250423",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.246024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "plt.imshow(complete_files[:,0][0].astype(\"uint8\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "216ebf0c",
   "metadata": {
    "papermill": {
     "duration": 0.004903,
     "end_time": "2025-07-09T20:39:38.259909",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.255006",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prepare Data\n",
    "\n",
    "Insturctions here:\n",
    "https://www.tensorflow.org/guide/keras/preprocessing_layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e1af04e",
   "metadata": {
    "papermill": {
     "duration": 0.004375,
     "end_time": "2025-07-09T20:39:38.268836",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.264461",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train the first model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "50eb3e58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:39:38.279045Z",
     "iopub.status.busy": "2025-07-09T20:39:38.278756Z",
     "iopub.status.idle": "2025-07-09T20:39:38.345502Z",
     "shell.execute_reply": "2025-07-09T20:39:38.344793Z"
    },
    "papermill": {
     "duration": 0.073546,
     "end_time": "2025-07-09T20:39:38.346911",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.273365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization\n",
    "from tensorflow.keras import layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65a19e67",
   "metadata": {
    "papermill": {
     "duration": 0.004681,
     "end_time": "2025-07-09T20:39:38.356425",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.351744",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 5\n",
    "filter_size = 3\n",
    "pool_size = 2\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(2, activation='sigmoid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e8d0e0cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:39:38.366980Z",
     "iopub.status.busy": "2025-07-09T20:39:38.366670Z",
     "iopub.status.idle": "2025-07-09T20:39:41.265522Z",
     "shell.execute_reply": "2025-07-09T20:39:41.264517Z"
    },
    "papermill": {
     "duration": 2.905984,
     "end_time": "2025-07-09T20:39:41.267161",
     "exception": false,
     "start_time": "2025-07-09T20:39:38.361177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "I0000 00:00:1752093579.530480      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 15\n",
    "filter_size = 3\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(32, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(16, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(8, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7ba3d27b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:39:41.277521Z",
     "iopub.status.busy": "2025-07-09T20:39:41.277282Z",
     "iopub.status.idle": "2025-07-09T20:39:41.308758Z",
     "shell.execute_reply": "2025-07-09T20:39:41.307901Z"
    },
    "papermill": {
     "duration": 0.037948,
     "end_time": "2025-07-09T20:39:41.309896",
     "exception": false,
     "start_time": "2025-07-09T20:39:41.271948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">420</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">47</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">47</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">22</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">22</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">240</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">7,712</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │             \u001b[38;5;34m420\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (\u001b[38;5;33mActivation\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m47\u001b[0m, \u001b[38;5;34m47\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m22\u001b[0m, \u001b[38;5;34m22\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_2 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_3 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m240\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m7,712\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_4 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │             \u001b[38;5;34m528\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │             \u001b[38;5;34m136\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_6 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m9\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">15,165</span> (59.24 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m15,165\u001b[0m (59.24 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">15,045</span> (58.77 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m15,045\u001b[0m (58.77 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">120</span> (480.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m120\u001b[0m (480.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bdc177ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:39:41.322210Z",
     "iopub.status.busy": "2025-07-09T20:39:41.321948Z",
     "iopub.status.idle": "2025-07-09T20:39:41.335625Z",
     "shell.execute_reply": "2025-07-09T20:39:41.334983Z"
    },
    "papermill": {
     "duration": 0.021064,
     "end_time": "2025-07-09T20:39:41.336747",
     "exception": false,
     "start_time": "2025-07-09T20:39:41.315683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "opt = keras.optimizers.Adam(learning_rate=0.0001)\n",
    "\n",
    "model.compile(\n",
    "  optimizer=opt,\n",
    "  loss='binary_crossentropy',\n",
    "  metrics=['AUC'], # AUC ?\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5a7b2e84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:39:41.348723Z",
     "iopub.status.busy": "2025-07-09T20:39:41.348492Z",
     "iopub.status.idle": "2025-07-09T20:43:20.944498Z",
     "shell.execute_reply": "2025-07-09T20:43:20.943478Z"
    },
    "papermill": {
     "duration": 219.603798,
     "end_time": "2025-07-09T20:43:20.946173",
     "exception": false,
     "start_time": "2025-07-09T20:39:41.342375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1752093593.176650      60 service.cc:148] XLA service 0x799a9003ab00 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1752093593.177405      60 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1752093593.883266      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m 23/500\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - AUC: 0.4657 - loss: 0.9588"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752093600.955964      60 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 13ms/step - AUC: 0.5894 - loss: 0.7095 - val_AUC: 0.7058 - val_loss: 0.6298\n",
      "Epoch 2/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.7254 - loss: 0.6026 - val_AUC: 0.7827 - val_loss: 0.5892\n",
      "Epoch 3/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.7721 - loss: 0.5722 - val_AUC: 0.8287 - val_loss: 0.5531\n",
      "Epoch 4/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.7928 - loss: 0.5518 - val_AUC: 0.8472 - val_loss: 0.5360\n",
      "Epoch 5/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8091 - loss: 0.5313 - val_AUC: 0.8352 - val_loss: 0.5301\n",
      "Epoch 6/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8239 - loss: 0.5088 - val_AUC: 0.8534 - val_loss: 0.4938\n",
      "Epoch 7/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8399 - loss: 0.4896 - val_AUC: 0.8658 - val_loss: 0.4749\n",
      "Epoch 8/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8546 - loss: 0.4692 - val_AUC: 0.8652 - val_loss: 0.4676\n",
      "Epoch 9/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8598 - loss: 0.4586 - val_AUC: 0.8778 - val_loss: 0.4578\n",
      "Epoch 10/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8630 - loss: 0.4544 - val_AUC: 0.8812 - val_loss: 0.4416\n",
      "Epoch 11/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8689 - loss: 0.4471 - val_AUC: 0.8648 - val_loss: 0.4700\n",
      "Epoch 12/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8696 - loss: 0.4470 - val_AUC: 0.8704 - val_loss: 0.4577\n",
      "Epoch 13/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8756 - loss: 0.4348 - val_AUC: 0.8615 - val_loss: 0.4978\n",
      "Epoch 14/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8796 - loss: 0.4299 - val_AUC: 0.8889 - val_loss: 0.4267\n",
      "Epoch 15/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8825 - loss: 0.4283 - val_AUC: 0.8937 - val_loss: 0.4148\n",
      "Epoch 16/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8893 - loss: 0.4146 - val_AUC: 0.8895 - val_loss: 0.4268\n",
      "Epoch 17/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8885 - loss: 0.4182 - val_AUC: 0.8970 - val_loss: 0.4077\n",
      "Epoch 18/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8914 - loss: 0.4145 - val_AUC: 0.8972 - val_loss: 0.4123\n",
      "Epoch 19/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8966 - loss: 0.4045 - val_AUC: 0.8919 - val_loss: 0.4226\n",
      "Epoch 20/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8998 - loss: 0.3985 - val_AUC: 0.8941 - val_loss: 0.4615\n",
      "Epoch 21/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8977 - loss: 0.3993 - val_AUC: 0.8908 - val_loss: 0.4306\n",
      "Epoch 22/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8985 - loss: 0.4004 - val_AUC: 0.8999 - val_loss: 0.4135\n",
      "Epoch 23/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9011 - loss: 0.3961 - val_AUC: 0.9001 - val_loss: 0.4023\n",
      "Epoch 24/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.8996 - loss: 0.3984 - val_AUC: 0.8965 - val_loss: 0.4734\n",
      "Epoch 25/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9023 - loss: 0.3959 - val_AUC: 0.8960 - val_loss: 0.4839\n",
      "Epoch 26/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9058 - loss: 0.3883 - val_AUC: 0.9059 - val_loss: 0.3943\n",
      "Epoch 27/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9022 - loss: 0.3914 - val_AUC: 0.9044 - val_loss: 0.3997\n",
      "Epoch 28/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9035 - loss: 0.3886 - val_AUC: 0.8997 - val_loss: 0.4113\n",
      "Epoch 29/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9033 - loss: 0.3913 - val_AUC: 0.9090 - val_loss: 0.3989\n",
      "Epoch 30/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9069 - loss: 0.3873 - val_AUC: 0.9094 - val_loss: 0.3853\n",
      "Epoch 31/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9062 - loss: 0.3849 - val_AUC: 0.9072 - val_loss: 0.4132\n",
      "Epoch 32/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9077 - loss: 0.3814 - val_AUC: 0.9049 - val_loss: 0.4023\n",
      "Epoch 33/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9070 - loss: 0.3842 - val_AUC: 0.9082 - val_loss: 0.3920\n",
      "Epoch 34/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9101 - loss: 0.3778 - val_AUC: 0.8885 - val_loss: 0.4978\n",
      "Epoch 35/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9160 - loss: 0.3669 - val_AUC: 0.8983 - val_loss: 0.4673\n",
      "Epoch 36/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9113 - loss: 0.3758 - val_AUC: 0.9103 - val_loss: 0.3923\n",
      "Epoch 37/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9088 - loss: 0.3794 - val_AUC: 0.9106 - val_loss: 0.3964\n",
      "Epoch 38/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9199 - loss: 0.3570 - val_AUC: 0.9041 - val_loss: 0.4365\n",
      "Epoch 39/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9158 - loss: 0.3656 - val_AUC: 0.9030 - val_loss: 0.4207\n",
      "Epoch 40/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9140 - loss: 0.3699 - val_AUC: 0.9075 - val_loss: 0.4107\n",
      "Epoch 41/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9147 - loss: 0.3691 - val_AUC: 0.9042 - val_loss: 0.4107\n",
      "Epoch 42/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9190 - loss: 0.3617 - val_AUC: 0.9111 - val_loss: 0.4003\n",
      "Epoch 43/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9192 - loss: 0.3577 - val_AUC: 0.9000 - val_loss: 0.4732\n",
      "Epoch 44/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9181 - loss: 0.3638 - val_AUC: 0.9107 - val_loss: 0.4342\n",
      "Epoch 45/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9150 - loss: 0.3663 - val_AUC: 0.9039 - val_loss: 0.4325\n",
      "Epoch 46/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9223 - loss: 0.3506 - val_AUC: 0.9069 - val_loss: 0.4281\n",
      "Epoch 47/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9172 - loss: 0.3587 - val_AUC: 0.9087 - val_loss: 0.3964\n",
      "Epoch 48/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9153 - loss: 0.3654 - val_AUC: 0.9054 - val_loss: 0.4360\n",
      "Epoch 49/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9233 - loss: 0.3503 - val_AUC: 0.9110 - val_loss: 0.4011\n",
      "Epoch 50/50\n",
      "\u001b[1m500/500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - AUC: 0.9234 - loss: 0.3511 - val_AUC: 0.9056 - val_loss: 0.4213\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "history = model.fit(\n",
    "  X_train,\n",
    "  y_train,\n",
    "  epochs=50,\n",
    "  validation_data=(X_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "925ebbc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:43:21.251738Z",
     "iopub.status.busy": "2025-07-09T20:43:21.250954Z",
     "iopub.status.idle": "2025-07-09T20:43:21.507691Z",
     "shell.execute_reply": "2025-07-09T20:43:21.506851Z"
    },
    "papermill": {
     "duration": 0.410343,
     "end_time": "2025-07-09T20:43:21.509304",
     "exception": false,
     "start_time": "2025-07-09T20:43:21.098961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a84b29ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:43:21.843931Z",
     "iopub.status.busy": "2025-07-09T20:43:21.843572Z",
     "iopub.status.idle": "2025-07-09T20:43:22.025877Z",
     "shell.execute_reply": "2025-07-09T20:43:22.024908Z"
    },
    "papermill": {
     "duration": 0.35174,
     "end_time": "2025-07-09T20:43:22.027385",
     "exception": false,
     "start_time": "2025-07-09T20:43:21.675645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['AUC'])\n",
    "plt.plot(history.history['val_AUC'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a070625",
   "metadata": {
    "papermill": {
     "duration": 0.213733,
     "end_time": "2025-07-09T20:43:22.397489",
     "exception": false,
     "start_time": "2025-07-09T20:43:22.183756",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Predict on new data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67f39b5a",
   "metadata": {
    "execution": {
     "execution_failed": "2025-07-09T19:44:24.922Z"
    },
    "papermill": {
     "duration": 0.15132,
     "end_time": "2025-07-09T20:43:22.699443",
     "exception": false,
     "start_time": "2025-07-09T20:43:22.548123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "def getfiles(path, max_length):\n",
    "    files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "    file_list = listdir(path)\n",
    "\n",
    "    for file in range(max_length):  #file_list (0,50000,5)\n",
    "        \n",
    "        current_file_path = join(mypath, file_list[file])\n",
    "    \n",
    "        if isfile(current_file_path):\n",
    "            img = plt.imread(current_file_path)\n",
    "            if file % 5 == 0:\n",
    "                img = np.flipud(img)\n",
    "            elif file % 7 == 0:\n",
    "                img = np.rot90(img)\n",
    "            elif file % 9 == 0:\n",
    "                img = np.fliplr(img)\n",
    "            \n",
    "            new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "            new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "            files.loc[len(files)] = [new_file_path, img]\n",
    "\n",
    "    complete_files = pd.merge(files,train_labels, how = \"left\",on = \"id\" ).drop(columns = [\"id\"])\n",
    "    complete_files = complete_files.to_numpy()\n",
    "    complete_files[:,0] = complete_files[:,0] / 255\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(np.stack(complete_files[:,0], axis = 0), \n",
    "                                                        complete_files[:,1], test_size=0.2, random_state=4790)\n",
    "    \n",
    "    return X_train, X_test, y_train.astype(\"float32\"), y_test.astype(\"float32\") #tf.data.Dataset.from_tensor_slices((np.stack(complete_files[:,0], axis = 0),label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67aaad60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:27:57.021209Z",
     "iopub.status.busy": "2025-07-09T20:27:57.020482Z",
     "iopub.status.idle": "2025-07-09T20:27:57.024920Z",
     "shell.execute_reply": "2025-07-09T20:27:57.023983Z",
     "shell.execute_reply.started": "2025-07-09T20:27:57.021186Z"
    },
    "papermill": {
     "duration": 0.146927,
     "end_time": "2025-07-09T20:43:22.994413",
     "exception": false,
     "start_time": "2025-07-09T20:43:22.847486",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "test_path = \"/kaggle/input/histopathologic-cancer-detection/test\"\n",
    "from glob import glob \n",
    "import cv2\n",
    "path = \"../input/\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a0af224",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:28:05.347298Z",
     "iopub.status.busy": "2025-07-09T20:28:05.347021Z",
     "iopub.status.idle": "2025-07-09T20:28:05.356129Z",
     "shell.execute_reply": "2025-07-09T20:28:05.355501Z",
     "shell.execute_reply.started": "2025-07-09T20:28:05.347277Z"
    },
    "papermill": {
     "duration": 0.156508,
     "end_time": "2025-07-09T20:43:23.307135",
     "exception": false,
     "start_time": "2025-07-09T20:43:23.150627",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "base_test_dir = path + 'test/'  #specify test data folder\n",
    "test_files = glob(os.path.join(base_test_dir,'*.tif')) #find the test file names\n",
    "submission = pd.DataFrame() #create a dataframe to hold results\n",
    "file_batch = 5000 #we will predict 5000 images at a time\n",
    "max_idx = len(test_files) #last index to use\n",
    "for idx in range(0, max_idx, file_batch): #iterate over test image batches\n",
    "    print(\"Indexes: %i - %i\"%(idx, idx+file_batch))\n",
    "    test_df = pd.DataFrame({'path': test_files[idx:idx+file_batch]}) #add the filenames to the dataframe\n",
    "    test_df['id'] = test_df.path.map(lambda x: x.split('/')[3].split(\".\")[0]) #add the ids to the dataframe\n",
    "    test_df['image'] = test_df['path'].map(cv2.imread) #read the batch\n",
    "    K_test = np.stack(test_df[\"image\"].values) #convert to numpy array\n",
    "    predictions = model.predict(K_test,verbose = 1) #predict the labels for the test data\n",
    "    test_df['label'] = predictions #store them in the dataframe\n",
    "    submission = pd.concat([submission, test_df[[\"id\", \"label\"]]])\n",
    "submission.head() #display first lines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e794eaa",
   "metadata": {
    "papermill": {
     "duration": 0.147366,
     "end_time": "2025-07-09T20:43:23.604709",
     "exception": false,
     "start_time": "2025-07-09T20:43:23.457343",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "submission.to_csv(\"submission.csv\", index = False, header = True) #create the submission file"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 862157,
     "sourceId": 11848,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 454.697307,
   "end_time": "2025-07-09T20:43:26.705180",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-09T20:35:52.007873",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
