{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "89a02ad8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-07T20:11:56.523799Z",
     "iopub.status.busy": "2025-07-07T20:11:56.523455Z",
     "iopub.status.idle": "2025-07-07T20:11:58.679227Z",
     "shell.execute_reply": "2025-07-07T20:11:58.678433Z"
    },
    "papermill": {
     "duration": 2.162326,
     "end_time": "2025-07-07T20:11:58.680370",
     "exception": false,
     "start_time": "2025-07-07T20:11:56.518044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['histopathologic-cancer-detection']\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "#for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#    for filename in filenames:\n",
    "#        print(os.path.join(dirname, filename))\n",
    "print(os.listdir(\"../input\"))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86991a5e",
   "metadata": {
    "papermill": {
     "duration": 0.003735,
     "end_time": "2025-07-07T20:11:58.688576",
     "exception": false,
     "start_time": "2025-07-07T20:11:58.684841",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Libraries**\n",
    "\n",
    "In general i like to load libraries \"on the go\" as this makes the code more understandable, therefore i will only load the most used libraries here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "db431ad4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:11:58.697154Z",
     "iopub.status.busy": "2025-07-07T20:11:58.696890Z",
     "iopub.status.idle": "2025-07-07T20:11:58.700393Z",
     "shell.execute_reply": "2025-07-07T20:11:58.699676Z"
    },
    "papermill": {
     "duration": 0.009021,
     "end_time": "2025-07-07T20:11:58.701459",
     "exception": false,
     "start_time": "2025-07-07T20:11:58.692438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#import keras\n",
    "import matplotlib.pyplot as plt\n",
    "#import tensorflow as tf\n",
    "#from tensorflow import keras\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beb333f7",
   "metadata": {
    "papermill": {
     "duration": 0.003801,
     "end_time": "2025-07-07T20:11:58.709152",
     "exception": false,
     "start_time": "2025-07-07T20:11:58.705351",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a453e16f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:11:58.717698Z",
     "iopub.status.busy": "2025-07-07T20:11:58.717470Z",
     "iopub.status.idle": "2025-07-07T20:11:59.067295Z",
     "shell.execute_reply": "2025-07-07T20:11:59.066699Z"
    },
    "papermill": {
     "duration": 0.35571,
     "end_time": "2025-07-07T20:11:59.068756",
     "exception": false,
     "start_time": "2025-07-07T20:11:58.713046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_labels = pd.read_csv(\"/kaggle/input/histopathologic-cancer-detection/train_labels.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1f31096",
   "metadata": {
    "papermill": {
     "duration": 0.004881,
     "end_time": "2025-07-07T20:11:59.078012",
     "exception": false,
     "start_time": "2025-07-07T20:11:59.073131",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection\n",
    "\n",
    "Let us get a first view on the dataset and how it is structured"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "396b1d3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:11:59.089049Z",
     "iopub.status.busy": "2025-07-07T20:11:59.088706Z",
     "iopub.status.idle": "2025-07-07T20:11:59.106007Z",
     "shell.execute_reply": "2025-07-07T20:11:59.105041Z"
    },
    "papermill": {
     "duration": 0.025656,
     "end_time": "2025-07-07T20:11:59.107794",
     "exception": false,
     "start_time": "2025-07-07T20:11:59.082138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lets look at the first rows: \n",
      "                                         id  label\n",
      "0  f38a6374c348f90b587e046aac6079959adf3835      0\n",
      "1  c18f2d887b7ae4f6742ee445113fa1aef383ed77      1\n",
      "2  755db6279dae599ebb4d39a9123cce439965282d      0\n",
      "3  bc3f0c64fb968ff4a8bd33af6971ecae77c75e08      0\n",
      "4  068aba587a4950175d04c680d38943fd488d6a9d      0\n"
     ]
    }
   ],
   "source": [
    "print(\"Lets look at the first rows: \")\n",
    "print(train_labels.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "844ecbcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:11:59.118839Z",
     "iopub.status.busy": "2025-07-07T20:11:59.118185Z",
     "iopub.status.idle": "2025-07-07T20:13:35.476377Z",
     "shell.execute_reply": "2025-07-07T20:13:35.475802Z"
    },
    "papermill": {
     "duration": 96.364385,
     "end_time": "2025-07-07T20:13:35.477661",
     "exception": false,
     "start_time": "2025-07-07T20:11:59.113276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "\n",
    "mypath = \"/kaggle/input/histopathologic-cancer-detection/train\" \n",
    "\n",
    "# read in all the files\n",
    "\n",
    "files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "file_list = listdir(mypath)\n",
    "\n",
    "for file in range(0,50000,5):  #file_list\n",
    "    \n",
    "    current_file_path = join(mypath, file_list[file])\n",
    "\n",
    "    if isfile(current_file_path):\n",
    "        img = plt.imread(current_file_path)\n",
    "        new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "        new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "        files.loc[len(files)] = [new_file_path, img]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1dea5584",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:35.487353Z",
     "iopub.status.busy": "2025-07-07T20:13:35.487142Z",
     "iopub.status.idle": "2025-07-07T20:13:35.585820Z",
     "shell.execute_reply": "2025-07-07T20:13:35.585196Z"
    },
    "papermill": {
     "duration": 0.104691,
     "end_time": "2025-07-07T20:13:35.587191",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.482500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "complete_files = pd.merge(files,train_labels, on = \"id\" ).drop(columns = [\"id\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8f2cdd7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:35.596580Z",
     "iopub.status.busy": "2025-07-07T20:13:35.596346Z",
     "iopub.status.idle": "2025-07-07T20:13:35.599930Z",
     "shell.execute_reply": "2025-07-07T20:13:35.599348Z"
    },
    "papermill": {
     "duration": 0.0094,
     "end_time": "2025-07-07T20:13:35.601021",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.591621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "complete_files = complete_files.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2a72eec",
   "metadata": {
    "papermill": {
     "duration": 0.003664,
     "end_time": "2025-07-07T20:13:35.608774",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.605110",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data can be saved as described here:\n",
    "https://www.kaggle.com/code/nicholasdunham/saving-and-persisting-data-in-kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3966a879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:35.617312Z",
     "iopub.status.busy": "2025-07-07T20:13:35.617106Z",
     "iopub.status.idle": "2025-07-07T20:13:35.620184Z",
     "shell.execute_reply": "2025-07-07T20:13:35.619665Z"
    },
    "papermill": {
     "duration": 0.008481,
     "end_time": "2025-07-07T20:13:35.621151",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.612670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from tempfile import TemporaryFile\n",
    "# go to kaggle/working to store file\n",
    "\n",
    "#np.save(\"numpy_array_final\", complete_files)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7b5780c",
   "metadata": {
    "papermill": {
     "duration": 0.003621,
     "end_time": "2025-07-07T20:13:35.628602",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.624981",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection and Cleaning\n",
    "\n",
    "to be continued"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b9104829",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:35.636867Z",
     "iopub.status.busy": "2025-07-07T20:13:35.636639Z",
     "iopub.status.idle": "2025-07-07T20:13:35.640416Z",
     "shell.execute_reply": "2025-07-07T20:13:35.639607Z"
    },
    "papermill": {
     "duration": 0.009166,
     "end_time": "2025-07-07T20:13:35.641536",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.632370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The image shape is: (96, 96, 3)\n"
     ]
    }
   ],
   "source": [
    "print(\"The image shape is:\", complete_files[:,0][0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7d53d25b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:35.649950Z",
     "iopub.status.busy": "2025-07-07T20:13:35.649743Z",
     "iopub.status.idle": "2025-07-07T20:13:35.896591Z",
     "shell.execute_reply": "2025-07-07T20:13:35.895916Z"
    },
    "papermill": {
     "duration": 0.253372,
     "end_time": "2025-07-07T20:13:35.898792",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.645420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f4bc3e1b350>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(complete_files[:,0][0].astype(\"uint8\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "647074ac",
   "metadata": {
    "papermill": {
     "duration": 0.004829,
     "end_time": "2025-07-07T20:13:35.909102",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.904273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prepare Data\n",
    "\n",
    "Insturctions here:\n",
    "https://www.tensorflow.org/guide/keras/preprocessing_layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e21efcfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:35.919690Z",
     "iopub.status.busy": "2025-07-07T20:13:35.919453Z",
     "iopub.status.idle": "2025-07-07T20:13:39.673217Z",
     "shell.execute_reply": "2025-07-07T20:13:39.672645Z"
    },
    "papermill": {
     "duration": 3.760675,
     "end_time": "2025-07-07T20:13:39.674589",
     "exception": false,
     "start_time": "2025-07-07T20:13:35.913914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# make values to be in range of 0-1\n",
    "x_train = (complete_files[:,0] / 255) - 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8632264f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:39.685177Z",
     "iopub.status.busy": "2025-07-07T20:13:39.684951Z",
     "iopub.status.idle": "2025-07-07T20:13:40.342487Z",
     "shell.execute_reply": "2025-07-07T20:13:40.341916Z"
    },
    "papermill": {
     "duration": 0.66428,
     "end_time": "2025-07-07T20:13:40.343980",
     "exception": false,
     "start_time": "2025-07-07T20:13:39.679700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# numpy was a series of array with stack this can be undone\n",
    "X = np.stack(x_train, axis = 0)\n",
    "y = complete_files[:,1] #.astype(\"float64\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cef60da3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:40.354427Z",
     "iopub.status.busy": "2025-07-07T20:13:40.354199Z",
     "iopub.status.idle": "2025-07-07T20:13:43.095905Z",
     "shell.execute_reply": "2025-07-07T20:13:43.095233Z"
    },
    "papermill": {
     "duration": 2.748329,
     "end_time": "2025-07-07T20:13:43.097392",
     "exception": false,
     "start_time": "2025-07-07T20:13:40.349063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4790)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "18c51c44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:13:43.109550Z",
     "iopub.status.busy": "2025-07-07T20:13:43.108970Z",
     "iopub.status.idle": "2025-07-07T20:14:08.532748Z",
     "shell.execute_reply": "2025-07-07T20:14:08.531896Z"
    },
    "papermill": {
     "duration": 25.430952,
     "end_time": "2025-07-07T20:14:08.534050",
     "exception": false,
     "start_time": "2025-07-07T20:13:43.103098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-07 20:13:46.516952: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1751919226.893552      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1751919227.000180      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8000, 96, 96, 3)\n",
      "(8000,)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1751919246.227263      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1751919246.227964      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "X_train = tf.convert_to_tensor(X_train)\n",
    "#y_train = tf.convert_to_tensor(y_train)\n",
    "X_test = tf.convert_to_tensor(X_test)\n",
    "#y_test = tf.convert_to_tensor(y_test)\n",
    "print(X_train.shape)\n",
    "print(y_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b5aacfc",
   "metadata": {
    "papermill": {
     "duration": 0.004527,
     "end_time": "2025-07-07T20:14:08.543747",
     "exception": false,
     "start_time": "2025-07-07T20:14:08.539220",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train the first model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "de819be0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:14:08.553859Z",
     "iopub.status.busy": "2025-07-07T20:14:08.553369Z",
     "iopub.status.idle": "2025-07-07T20:14:08.629204Z",
     "shell.execute_reply": "2025-07-07T20:14:08.628597Z"
    },
    "papermill": {
     "duration": 0.08226,
     "end_time": "2025-07-07T20:14:08.630475",
     "exception": false,
     "start_time": "2025-07-07T20:14:08.548215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09ec3fd7",
   "metadata": {
    "papermill": {
     "duration": 0.004603,
     "end_time": "2025-07-07T20:14:08.640135",
     "exception": false,
     "start_time": "2025-07-07T20:14:08.635532",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 5\n",
    "filter_size = 3\n",
    "pool_size = 2\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(2, activation='sigmoid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1cf7ab63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:14:08.650203Z",
     "iopub.status.busy": "2025-07-07T20:14:08.649993Z",
     "iopub.status.idle": "2025-07-07T20:14:10.606397Z",
     "shell.execute_reply": "2025-07-07T20:14:10.605846Z"
    },
    "papermill": {
     "duration": 1.963056,
     "end_time": "2025-07-07T20:14:10.607718",
     "exception": false,
     "start_time": "2025-07-07T20:14:08.644662",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 10\n",
    "filter_size = 3\n",
    "pool_size = 2\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(64, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(32, activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(2, activation='softmax'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dd3ee732",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:14:10.618720Z",
     "iopub.status.busy": "2025-07-07T20:14:10.618477Z",
     "iopub.status.idle": "2025-07-07T20:14:10.643724Z",
     "shell.execute_reply": "2025-07-07T20:14:10.642965Z"
    },
    "papermill": {
     "duration": 0.031435,
     "end_time": "2025-07-07T20:14:10.644747",
     "exception": false,
     "start_time": "2025-07-07T20:14:10.613312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential_1\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">280</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">40</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">910</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">40</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">92</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">90</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">90</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">910</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">90</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">90</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">40</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">90</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">90</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">90</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">90</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">88</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">88</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">910</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_4                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">88</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">88</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">40</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">88</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">88</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">88</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">88</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">77440</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">9,912,448</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">66</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │             \u001b[38;5;34m280\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │              \u001b[38;5;34m40\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │             \u001b[38;5;34m910\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │              \u001b[38;5;34m40\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_2 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m92\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m90\u001b[0m, \u001b[38;5;34m90\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │             \u001b[38;5;34m910\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m90\u001b[0m, \u001b[38;5;34m90\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │              \u001b[38;5;34m40\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_3 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m90\u001b[0m, \u001b[38;5;34m90\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m90\u001b[0m, \u001b[38;5;34m90\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m88\u001b[0m, \u001b[38;5;34m88\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │             \u001b[38;5;34m910\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_4                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m88\u001b[0m, \u001b[38;5;34m88\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │              \u001b[38;5;34m40\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_4 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m88\u001b[0m, \u001b[38;5;34m88\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_4 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m88\u001b[0m, \u001b[38;5;34m88\u001b[0m, \u001b[38;5;34m10\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m77440\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │       \u001b[38;5;34m9,912,448\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m8,256\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_6 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m2,080\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_7 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                   │              \u001b[38;5;34m66\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">9,926,020</span> (37.86 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m9,926,020\u001b[0m (37.86 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">9,925,940</span> (37.86 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m9,925,940\u001b[0m (37.86 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">80</span> (320.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m80\u001b[0m (320.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "38949988",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:14:10.657117Z",
     "iopub.status.busy": "2025-07-07T20:14:10.656506Z",
     "iopub.status.idle": "2025-07-07T20:14:10.668886Z",
     "shell.execute_reply": "2025-07-07T20:14:10.668123Z"
    },
    "papermill": {
     "duration": 0.019471,
     "end_time": "2025-07-07T20:14:10.669974",
     "exception": false,
     "start_time": "2025-07-07T20:14:10.650503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "from keras import layers\n",
    "opt = keras.optimizers.Adam(learning_rate=0.0001)\n",
    "\n",
    "model.compile(\n",
    "  optimizer=opt,\n",
    "  loss='categorical_crossentropy',\n",
    "  metrics=['accuracy'], # AUC ?\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bc515040",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:14:10.681585Z",
     "iopub.status.busy": "2025-07-07T20:14:10.681088Z",
     "iopub.status.idle": "2025-07-07T20:15:31.588487Z",
     "shell.execute_reply": "2025-07-07T20:15:31.587783Z"
    },
    "papermill": {
     "duration": 80.914755,
     "end_time": "2025-07-07T20:15:31.590045",
     "exception": false,
     "start_time": "2025-07-07T20:14:10.675290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1751919256.888638      60 service.cc:148] XLA service 0x7f4968001c10 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1751919256.890281      60 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1751919256.890313      60 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1751919257.578484      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m  8/250\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m5s\u001b[0m 24ms/step - accuracy: 0.4888 - loss: 1.0862"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1751919265.910386      60 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 23ms/step - accuracy: 0.6147 - loss: 0.7428 - val_accuracy: 0.4880 - val_loss: 0.7636\n",
      "Epoch 2/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.7209 - loss: 0.5614 - val_accuracy: 0.7085 - val_loss: 0.5319\n",
      "Epoch 3/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.7400 - loss: 0.5388 - val_accuracy: 0.7720 - val_loss: 0.4766\n",
      "Epoch 4/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.7812 - loss: 0.4923 - val_accuracy: 0.7960 - val_loss: 0.4416\n",
      "Epoch 5/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.7914 - loss: 0.4660 - val_accuracy: 0.7290 - val_loss: 0.5662\n",
      "Epoch 6/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.8094 - loss: 0.4418 - val_accuracy: 0.8075 - val_loss: 0.4474\n",
      "Epoch 7/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.7965 - loss: 0.4408 - val_accuracy: 0.7950 - val_loss: 0.4596\n",
      "Epoch 8/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.8143 - loss: 0.4164 - val_accuracy: 0.8180 - val_loss: 0.4330\n",
      "Epoch 9/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.8247 - loss: 0.3931 - val_accuracy: 0.8030 - val_loss: 0.4557\n",
      "Epoch 10/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.8126 - loss: 0.4068 - val_accuracy: 0.8000 - val_loss: 0.4585\n",
      "Epoch 11/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.8283 - loss: 0.3758 - val_accuracy: 0.8140 - val_loss: 0.4258\n",
      "Epoch 12/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.8320 - loss: 0.3629 - val_accuracy: 0.8130 - val_loss: 0.4286\n",
      "Epoch 13/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.8455 - loss: 0.3481 - val_accuracy: 0.8080 - val_loss: 0.4343\n",
      "Epoch 14/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.8418 - loss: 0.3444 - val_accuracy: 0.7750 - val_loss: 0.4967\n",
      "Epoch 15/15\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 18ms/step - accuracy: 0.8452 - loss: 0.3293 - val_accuracy: 0.7990 - val_loss: 0.4570\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "history = model.fit(\n",
    "  X_train,\n",
    "  to_categorical(y_train),\n",
    "  epochs=15,\n",
    "  validation_data=(X_test, to_categorical(y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "64ff589d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:15:31.731430Z",
     "iopub.status.busy": "2025-07-07T20:15:31.731159Z",
     "iopub.status.idle": "2025-07-07T20:15:31.911765Z",
     "shell.execute_reply": "2025-07-07T20:15:31.910942Z"
    },
    "papermill": {
     "duration": 0.23055,
     "end_time": "2025-07-07T20:15:31.913790",
     "exception": false,
     "start_time": "2025-07-07T20:15:31.683240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b7138884",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T20:15:32.011430Z",
     "iopub.status.busy": "2025-07-07T20:15:32.011175Z",
     "iopub.status.idle": "2025-07-07T20:15:32.206838Z",
     "shell.execute_reply": "2025-07-07T20:15:32.206058Z"
    },
    "papermill": {
     "duration": 0.24378,
     "end_time": "2025-07-07T20:15:32.208105",
     "exception": false,
     "start_time": "2025-07-07T20:15:31.964325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 862157,
     "sourceId": 11848,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 225.240545,
   "end_time": "2025-07-07T20:15:35.435912",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-07T20:11:50.195367",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
