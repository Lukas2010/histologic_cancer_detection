{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b86a2b5",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:05.163389Z",
     "iopub.status.busy": "2025-07-10T07:31:05.163136Z",
     "iopub.status.idle": "2025-07-10T07:31:06.552378Z",
     "shell.execute_reply": "2025-07-10T07:31:06.551304Z"
    },
    "papermill": {
     "duration": 1.397033,
     "end_time": "2025-07-10T07:31:06.553976",
     "exception": false,
     "start_time": "2025-07-10T07:31:05.156943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['histopathologic-cancer-detection']\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "#for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#    for filename in filenames:\n",
    "#        print(os.path.join(dirname, filename))\n",
    "print(os.listdir(\"../input\"))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cb9ee6a",
   "metadata": {
    "papermill": {
     "duration": 0.006288,
     "end_time": "2025-07-10T07:31:06.568233",
     "exception": false,
     "start_time": "2025-07-10T07:31:06.561945",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Libraries**\n",
    "\n",
    "In general i like to load libraries \"on the go\" as this makes the code more understandable, therefore i will only load the most used libraries here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a57b0e86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:06.581368Z",
     "iopub.status.busy": "2025-07-10T07:31:06.580613Z",
     "iopub.status.idle": "2025-07-10T07:31:20.551299Z",
     "shell.execute_reply": "2025-07-10T07:31:20.550534Z"
    },
    "papermill": {
     "duration": 13.978476,
     "end_time": "2025-07-10T07:31:20.552928",
     "exception": false,
     "start_time": "2025-07-10T07:31:06.574452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-10 07:31:08.227707: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752132668.425101      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752132668.479527      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "#from tensorflow import keras\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25f5d73e",
   "metadata": {
    "papermill": {
     "duration": 0.00431,
     "end_time": "2025-07-10T07:31:20.562196",
     "exception": false,
     "start_time": "2025-07-10T07:31:20.557886",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b5f6a3db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:20.572432Z",
     "iopub.status.busy": "2025-07-10T07:31:20.571579Z",
     "iopub.status.idle": "2025-07-10T07:31:20.905629Z",
     "shell.execute_reply": "2025-07-10T07:31:20.904757Z"
    },
    "papermill": {
     "duration": 0.34059,
     "end_time": "2025-07-10T07:31:20.907161",
     "exception": false,
     "start_time": "2025-07-10T07:31:20.566571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_labels = pd.read_csv(\"/kaggle/input/histopathologic-cancer-detection/train_labels.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c6beb1f",
   "metadata": {
    "papermill": {
     "duration": 0.00447,
     "end_time": "2025-07-10T07:31:20.916656",
     "exception": false,
     "start_time": "2025-07-10T07:31:20.912186",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection\n",
    "\n",
    "Let us get a first view on the dataset and how it is structured"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6584d55c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:20.926523Z",
     "iopub.status.busy": "2025-07-10T07:31:20.926288Z",
     "iopub.status.idle": "2025-07-10T07:31:20.937519Z",
     "shell.execute_reply": "2025-07-10T07:31:20.936716Z"
    },
    "papermill": {
     "duration": 0.01754,
     "end_time": "2025-07-10T07:31:20.938658",
     "exception": false,
     "start_time": "2025-07-10T07:31:20.921118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lets look at the first rows: \n",
      "                                         id  label\n",
      "0  f38a6374c348f90b587e046aac6079959adf3835      0\n",
      "1  c18f2d887b7ae4f6742ee445113fa1aef383ed77      1\n",
      "2  755db6279dae599ebb4d39a9123cce439965282d      0\n",
      "3  bc3f0c64fb968ff4a8bd33af6971ecae77c75e08      0\n",
      "4  068aba587a4950175d04c680d38943fd488d6a9d      0\n"
     ]
    }
   ],
   "source": [
    "print(\"Lets look at the first rows: \")\n",
    "print(train_labels.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6c4ea82b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:20.948452Z",
     "iopub.status.busy": "2025-07-10T07:31:20.948002Z",
     "iopub.status.idle": "2025-07-10T07:31:21.063419Z",
     "shell.execute_reply": "2025-07-10T07:31:21.062631Z"
    },
    "papermill": {
     "duration": 0.121833,
     "end_time": "2025-07-10T07:31:21.064890",
     "exception": false,
     "start_time": "2025-07-10T07:31:20.943057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "from keras.utils import to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "def getfiles(path, max_length):\n",
    "    files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "    file_list = listdir(path)\n",
    "\n",
    "    for file in range(0,max_length,100):  #file_list (0,50000,5)\n",
    "        \n",
    "        current_file_path = join(mypath, file_list[file])\n",
    "    \n",
    "        if isfile(current_file_path):\n",
    "            img = plt.imread(current_file_path)\n",
    "            if file % 5 == 0:\n",
    "                img = np.flipud(img)\n",
    "            elif file % 7 == 0:\n",
    "                img = np.rot90(img)\n",
    "            elif file % 9 == 0:\n",
    "                img = np.fliplr(img)\n",
    "            \n",
    "            new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "            new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "            files.loc[len(files)] = [new_file_path, img]\n",
    "\n",
    "    complete_files = pd.merge(files,train_labels, how = \"left\",on = \"id\" ).drop(columns = [\"id\"])\n",
    "    complete_files = complete_files.to_numpy()\n",
    "    complete_files[:,0] = complete_files[:,0] / 255\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(np.stack(complete_files[:,0], axis = 0), \n",
    "                                                        complete_files[:,1], test_size=0.2, random_state=4790)\n",
    "    \n",
    "    return X_train, X_test, y_train.astype(\"float32\"), y_test.astype(\"float32\") #tf.data.Dataset.from_tensor_slices((np.stack(complete_files[:,0], axis = 0),label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10db2ba1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T19:49:32.931084Z",
     "iopub.status.busy": "2025-07-08T19:49:32.930719Z",
     "iopub.status.idle": "2025-07-08T19:49:32.939368Z",
     "shell.execute_reply": "2025-07-08T19:49:32.938276Z",
     "shell.execute_reply.started": "2025-07-08T19:49:32.931063Z"
    },
    "papermill": {
     "duration": 0.004243,
     "end_time": "2025-07-10T07:31:21.073762",
     "exception": false,
     "start_time": "2025-07-10T07:31:21.069519",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "complete_files[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "56e6985c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:21.083022Z",
     "iopub.status.busy": "2025-07-10T07:31:21.082826Z",
     "iopub.status.idle": "2025-07-10T07:31:39.289841Z",
     "shell.execute_reply": "2025-07-10T07:31:39.289232Z"
    },
    "papermill": {
     "duration": 18.213153,
     "end_time": "2025-07-10T07:31:39.291129",
     "exception": false,
     "start_time": "2025-07-10T07:31:21.077976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mypath = \"/kaggle/input/histopathologic-cancer-detection/train\"\n",
    "X_train, X_test, y_train, y_test = getfiles(path = mypath, max_length = 200000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "448da4e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:39.301886Z",
     "iopub.status.busy": "2025-07-10T07:31:39.301672Z",
     "iopub.status.idle": "2025-07-10T07:31:39.305854Z",
     "shell.execute_reply": "2025-07-10T07:31:39.305076Z"
    },
    "papermill": {
     "duration": 0.010368,
     "end_time": "2025-07-10T07:31:39.306929",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.296561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 1. 0. ... 1. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb776a41",
   "metadata": {
    "papermill": {
     "duration": 0.004322,
     "end_time": "2025-07-10T07:31:39.315599",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.311277",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "check for NAs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc3d78e3",
   "metadata": {
    "papermill": {
     "duration": 0.004268,
     "end_time": "2025-07-10T07:31:39.324252",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.319984",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "https://www.tensorflow.org/tutorials/load_data/images\n",
    "\n",
    "To Do\n",
    "- add poo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "871bd701",
   "metadata": {
    "papermill": {
     "duration": 0.004419,
     "end_time": "2025-07-10T07:31:39.333294",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.328875",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data can be saved as described here:\n",
    "https://www.kaggle.com/code/nicholasdunham/saving-and-persisting-data-in-kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3daeeea0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:39.343207Z",
     "iopub.status.busy": "2025-07-10T07:31:39.342812Z",
     "iopub.status.idle": "2025-07-10T07:31:39.346062Z",
     "shell.execute_reply": "2025-07-10T07:31:39.345356Z"
    },
    "papermill": {
     "duration": 0.009447,
     "end_time": "2025-07-10T07:31:39.347090",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.337643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from tempfile import TemporaryFile\n",
    "# go to kaggle/working to store file\n",
    "\n",
    "#np.save(\"numpy_array_final\", complete_files)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b86c10f5",
   "metadata": {
    "papermill": {
     "duration": 0.004504,
     "end_time": "2025-07-10T07:31:39.356018",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.351514",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Inspection and Cleaning\n",
    "\n",
    "to be continued"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "262340b5",
   "metadata": {
    "papermill": {
     "duration": 0.004291,
     "end_time": "2025-07-10T07:31:39.364856",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.360565",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"The image shape is:\", complete_files[:,0][0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41aebcf4",
   "metadata": {
    "papermill": {
     "duration": 0.004434,
     "end_time": "2025-07-10T07:31:39.373595",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.369161",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "plt.imshow(complete_files[:,0][0].astype(\"uint8\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2d72d61",
   "metadata": {
    "papermill": {
     "duration": 0.004462,
     "end_time": "2025-07-10T07:31:39.382390",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.377928",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prepare Data\n",
    "\n",
    "Insturctions here:\n",
    "https://www.tensorflow.org/guide/keras/preprocessing_layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8add8851",
   "metadata": {
    "papermill": {
     "duration": 0.004241,
     "end_time": "2025-07-10T07:31:39.391108",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.386867",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train the first model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "33108761",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:39.400879Z",
     "iopub.status.busy": "2025-07-10T07:31:39.400442Z",
     "iopub.status.idle": "2025-07-10T07:31:39.458470Z",
     "shell.execute_reply": "2025-07-10T07:31:39.457774Z"
    },
    "papermill": {
     "duration": 0.064293,
     "end_time": "2025-07-10T07:31:39.459744",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.395451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization\n",
    "from tensorflow.keras import layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6c4b96c",
   "metadata": {
    "papermill": {
     "duration": 0.004269,
     "end_time": "2025-07-10T07:31:39.468468",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.464199",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 5\n",
    "filter_size = 3\n",
    "pool_size = 2\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(2, activation='sigmoid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2b05d46d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:39.478423Z",
     "iopub.status.busy": "2025-07-10T07:31:39.477880Z",
     "iopub.status.idle": "2025-07-10T07:31:42.023101Z",
     "shell.execute_reply": "2025-07-10T07:31:42.022533Z"
    },
    "papermill": {
     "duration": 2.551439,
     "end_time": "2025-07-10T07:31:42.024378",
     "exception": false,
     "start_time": "2025-07-10T07:31:39.472939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "I0000 00:00:1752132700.532387      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout\n",
    "\n",
    "num_filters = 15\n",
    "filter_size = 3\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('tanh'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('tanh'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('tanh'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(num_filters, filter_size, input_shape=(96,96,3)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('tanh'))\n",
    "model.add(Dropout(0.1))\n",
    "\n",
    "model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(32, activation = \"tanh\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(16, activation = \"tanh\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(8, activation = \"tanh\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "67b4c6cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:42.034794Z",
     "iopub.status.busy": "2025-07-10T07:31:42.034576Z",
     "iopub.status.idle": "2025-07-10T07:31:42.061908Z",
     "shell.execute_reply": "2025-07-10T07:31:42.061215Z"
    },
    "papermill": {
     "duration": 0.033608,
     "end_time": "2025-07-10T07:31:42.063023",
     "exception": false,
     "start_time": "2025-07-10T07:31:42.029415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">420</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">94</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">47</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">47</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">45</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">22</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">22</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,040</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">240</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">7,712</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │             \u001b[38;5;34m420\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation (\u001b[38;5;33mActivation\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m94\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m47\u001b[0m, \u001b[38;5;34m47\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_1 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m45\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m22\u001b[0m, \u001b[38;5;34m22\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_2 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m15\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │           \u001b[38;5;34m2,040\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │              \u001b[38;5;34m60\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ activation_3 (\u001b[38;5;33mActivation\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m15\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m240\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m7,712\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_4 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │             \u001b[38;5;34m528\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │             \u001b[38;5;34m136\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_6 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m9\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">15,165</span> (59.24 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m15,165\u001b[0m (59.24 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">15,045</span> (58.77 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m15,045\u001b[0m (58.77 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">120</span> (480.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m120\u001b[0m (480.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0905e614",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:42.074664Z",
     "iopub.status.busy": "2025-07-10T07:31:42.074261Z",
     "iopub.status.idle": "2025-07-10T07:31:42.085858Z",
     "shell.execute_reply": "2025-07-10T07:31:42.085340Z"
    },
    "papermill": {
     "duration": 0.018281,
     "end_time": "2025-07-10T07:31:42.086861",
     "exception": false,
     "start_time": "2025-07-10T07:31:42.068580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "opt = keras.optimizers.Adam(learning_rate=0.0001)\n",
    "\n",
    "model.compile(\n",
    "  optimizer=opt,\n",
    "  loss='binary_crossentropy',\n",
    "  metrics=['AUC'], # AUC ?\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7582086d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:31:42.098287Z",
     "iopub.status.busy": "2025-07-10T07:31:42.097835Z",
     "iopub.status.idle": "2025-07-10T07:32:03.823222Z",
     "shell.execute_reply": "2025-07-10T07:32:03.822653Z"
    },
    "papermill": {
     "duration": 21.732398,
     "end_time": "2025-07-10T07:32:03.824558",
     "exception": false,
     "start_time": "2025-07-10T07:31:42.092160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1752132708.444428      57 service.cc:148] XLA service 0x7f56d4027aa0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1752132708.445097      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1752132709.066420      57 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m25/50\u001b[0m \u001b[32m━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - AUC: 0.5573 - loss: 0.7049"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752132715.220381      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 49ms/step - AUC: 0.5607 - loss: 0.6984 - val_AUC: 0.5088 - val_loss: 0.7174\n",
      "Epoch 2/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.5894 - loss: 0.6765 - val_AUC: 0.5299 - val_loss: 0.7199\n",
      "Epoch 3/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.5881 - loss: 0.6751 - val_AUC: 0.5965 - val_loss: 0.6858\n",
      "Epoch 4/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.6884 - loss: 0.6265 - val_AUC: 0.7010 - val_loss: 0.6463\n",
      "Epoch 5/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.7475 - loss: 0.5912 - val_AUC: 0.7048 - val_loss: 0.6272\n",
      "Epoch 6/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.7647 - loss: 0.5767 - val_AUC: 0.7231 - val_loss: 0.6281\n",
      "Epoch 7/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.7646 - loss: 0.5652 - val_AUC: 0.7703 - val_loss: 0.5910\n",
      "Epoch 8/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.7860 - loss: 0.5518 - val_AUC: 0.7765 - val_loss: 0.5688\n",
      "Epoch 9/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.7722 - loss: 0.5628 - val_AUC: 0.7747 - val_loss: 0.6177\n",
      "Epoch 10/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.7782 - loss: 0.5563 - val_AUC: 0.7975 - val_loss: 0.5669\n",
      "Epoch 11/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.7819 - loss: 0.5551 - val_AUC: 0.7954 - val_loss: 0.5701\n",
      "Epoch 12/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.7816 - loss: 0.5532 - val_AUC: 0.7859 - val_loss: 0.6362\n",
      "Epoch 13/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.8111 - loss: 0.5241 - val_AUC: 0.7864 - val_loss: 0.6915\n",
      "Epoch 14/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - AUC: 0.8060 - loss: 0.5258 - val_AUC: 0.7915 - val_loss: 0.6049\n",
      "Epoch 15/15\n",
      "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - AUC: 0.8204 - loss: 0.5151 - val_AUC: 0.8087 - val_loss: 0.5675\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "history = model.fit(\n",
    "  X_train,\n",
    "  y_train,\n",
    "  epochs=15,\n",
    "  validation_data=(X_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3709cc78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:32:03.846243Z",
     "iopub.status.busy": "2025-07-10T07:32:03.846039Z",
     "iopub.status.idle": "2025-07-10T07:32:04.050908Z",
     "shell.execute_reply": "2025-07-10T07:32:04.050242Z"
    },
    "papermill": {
     "duration": 0.216693,
     "end_time": "2025-07-10T07:32:04.052119",
     "exception": false,
     "start_time": "2025-07-10T07:32:03.835426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2f7c502e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:32:04.075224Z",
     "iopub.status.busy": "2025-07-10T07:32:04.074748Z",
     "iopub.status.idle": "2025-07-10T07:32:04.233610Z",
     "shell.execute_reply": "2025-07-10T07:32:04.232941Z"
    },
    "papermill": {
     "duration": 0.171641,
     "end_time": "2025-07-10T07:32:04.235188",
     "exception": false,
     "start_time": "2025-07-10T07:32:04.063547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['AUC'])\n",
    "plt.plot(history.history['val_AUC'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a6ac53e",
   "metadata": {
    "papermill": {
     "duration": 0.010845,
     "end_time": "2025-07-10T07:32:04.258428",
     "exception": false,
     "start_time": "2025-07-10T07:32:04.247583",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Predict on new data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdf9acda",
   "metadata": {
    "execution": {
     "execution_failed": "2025-07-09T19:44:24.922Z"
    },
    "papermill": {
     "duration": 0.010908,
     "end_time": "2025-07-10T07:32:04.280230",
     "exception": false,
     "start_time": "2025-07-10T07:32:04.269322",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "def getfiles(path, max_length):\n",
    "    files = pd.DataFrame(columns = [\"id\", \"image_data\"])\n",
    "\n",
    "    file_list = listdir(path)\n",
    "\n",
    "    for file in range(max_length):  #file_list (0,50000,5)\n",
    "        \n",
    "        current_file_path = join(mypath, file_list[file])\n",
    "    \n",
    "        if isfile(current_file_path):\n",
    "            img = plt.imread(current_file_path)\n",
    "            if file % 5 == 0:\n",
    "                img = np.flipud(img)\n",
    "            elif file % 7 == 0:\n",
    "                img = np.rot90(img)\n",
    "            elif file % 9 == 0:\n",
    "                img = np.fliplr(img)\n",
    "            \n",
    "            new_file_path = current_file_path.replace(\".tif\", \"\")\n",
    "            new_file_path = new_file_path[new_file_path.rfind(\"/\")+1:]\n",
    "            files.loc[len(files)] = [new_file_path, img]\n",
    "\n",
    "    complete_files = pd.merge(files,train_labels, how = \"left\",on = \"id\" ).drop(columns = [\"id\"])\n",
    "    complete_files = complete_files.to_numpy()\n",
    "    complete_files[:,0] = complete_files[:,0] / 255\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(np.stack(complete_files[:,0], axis = 0), \n",
    "                                                        complete_files[:,1], test_size=0.2, random_state=4790)\n",
    "    \n",
    "    return X_train, X_test, y_train.astype(\"float32\"), y_test.astype(\"float32\") #tf.data.Dataset.from_tensor_slices((np.stack(complete_files[:,0], axis = 0),label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a496fb6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T20:27:57.021209Z",
     "iopub.status.busy": "2025-07-09T20:27:57.020482Z",
     "iopub.status.idle": "2025-07-09T20:27:57.024920Z",
     "shell.execute_reply": "2025-07-09T20:27:57.023983Z",
     "shell.execute_reply.started": "2025-07-09T20:27:57.021186Z"
    },
    "papermill": {
     "duration": 0.01118,
     "end_time": "2025-07-10T07:32:04.302391",
     "exception": false,
     "start_time": "2025-07-10T07:32:04.291211",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "test_path = \"/kaggle/input/histopathologic-cancer-detection/test\"\n",
    "from glob import glob \n",
    "import cv2\n",
    "path = \"../input/\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b171f866",
   "metadata": {
    "papermill": {
     "duration": 0.011169,
     "end_time": "2025-07-10T07:32:04.324965",
     "exception": false,
     "start_time": "2025-07-10T07:32:04.313796",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#base_test_dir = path + 'test/'  #specify test data folder\n",
    "test_path = \"/kaggle/input/histopathologic-cancer-detection/test\"\n",
    "test_files  = listdir(test_path)\n",
    "#test_files = glob(os.path.join(base_test_dir,'*.tif')) #find the test file names\n",
    "submission = pd.DataFrame() #create a dataframe to hold results\n",
    "file_batch = 1000 #we will predict 5000 images at a time\n",
    "max_idx = len(test_files) #last index to use9*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b33dc73",
   "metadata": {
    "papermill": {
     "duration": 0.011166,
     "end_time": "2025-07-10T07:32:04.394918",
     "exception": false,
     "start_time": "2025-07-10T07:32:04.383752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(max_idx)\n",
    "max_idx = 5000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ec68ffe4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:32:04.418237Z",
     "iopub.status.busy": "2025-07-10T07:32:04.417988Z",
     "iopub.status.idle": "2025-07-10T07:32:17.041346Z",
     "shell.execute_reply": "2025-07-10T07:32:17.040619Z"
    },
    "papermill": {
     "duration": 12.636681,
     "end_time": "2025-07-10T07:32:17.042679",
     "exception": false,
     "start_time": "2025-07-10T07:32:04.405998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a7ea26360815d8492433b14cd8318607bcf99d9e</td>\n",
       "      <td>0.778808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>59d21133c845dff1ebc7a0c7cf40c145ea9e9664</td>\n",
       "      <td>0.753557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5fde41ce8c6048a5c2f38eca12d6528fa312cdbb</td>\n",
       "      <td>0.831538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bd953a3b1db1f7041ee95ff482594c4f46c73ed0</td>\n",
       "      <td>0.828431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>523fc2efd7aba53e597ab0f69cc2cbded7a6ce62</td>\n",
       "      <td>0.839890</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         id     label\n",
       "0  a7ea26360815d8492433b14cd8318607bcf99d9e  0.778808\n",
       "1  59d21133c845dff1ebc7a0c7cf40c145ea9e9664  0.753557\n",
       "2  5fde41ce8c6048a5c2f38eca12d6528fa312cdbb  0.831538\n",
       "3  bd953a3b1db1f7041ee95ff482594c4f46c73ed0  0.828431\n",
       "4  523fc2efd7aba53e597ab0f69cc2cbded7a6ce62  0.839890"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import cv2\n",
    "from glob import glob \n",
    "\n",
    "base_test_dir = \"/kaggle/input/histopathologic-cancer-detection/\" + 'test/' #specify test data folder\n",
    "test_files = glob(os.path.join(base_test_dir,'*.tif')) #find the test file names\n",
    "submission = pd.DataFrame() #create a dataframe to hold results\n",
    "file_batch = 1000 #we will predict 5000 images at a time\n",
    "max_idx = 2000 #len(test_files) #last index to use\n",
    "for idx in range(0, max_idx, file_batch): #iterate over test image batches\n",
    "    #print(\"Indexes: %i - %i\"%(idx, idx+file_batch))\n",
    "    test_df = pd.DataFrame({'path': test_files[idx:idx+file_batch]}) #add the filenames to the dataframe\n",
    "    #print(test_df.path[0])\n",
    "    test_df['id'] = test_df.path.map(lambda x: x.split('/')[5].split(\".\")[0]) #add the ids to the dataframe\n",
    "    #print(test_df.id[0])\n",
    "    test_df['image'] = test_df['path'].map(cv2.imread) #read the batch\n",
    "    K_test = np.stack(test_df[\"image\"].values) #convert to numpy array\n",
    "    #print(K_test.shape)\n",
    "    \n",
    "    predictions = model.predict(K_test,verbose = 1) #predict the labels for the test data\n",
    "    #print(predictions)\n",
    "    test_df['label'] = predictions #store them in the dataframe\n",
    "    submission = pd.concat([submission, test_df[[\"id\", \"label\"]]])\n",
    "submission.head() #display first lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b81fcfc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:32:17.067316Z",
     "iopub.status.busy": "2025-07-10T07:32:17.066928Z",
     "iopub.status.idle": "2025-07-10T07:32:17.072306Z",
     "shell.execute_reply": "2025-07-10T07:32:17.071519Z"
    },
    "papermill": {
     "duration": 0.018389,
     "end_time": "2025-07-10T07:32:17.073333",
     "exception": false,
     "start_time": "2025-07-10T07:32:17.054944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                           id     label\n",
      "0    a7ea26360815d8492433b14cd8318607bcf99d9e  0.778808\n",
      "1    59d21133c845dff1ebc7a0c7cf40c145ea9e9664  0.753557\n",
      "2    5fde41ce8c6048a5c2f38eca12d6528fa312cdbb  0.831538\n",
      "3    bd953a3b1db1f7041ee95ff482594c4f46c73ed0  0.828431\n",
      "4    523fc2efd7aba53e597ab0f69cc2cbded7a6ce62  0.839890\n",
      "..                                        ...       ...\n",
      "995  db662f829abedff109d92534f26c18c5e7b3eadd  0.838045\n",
      "996  c2852e69bc5986c45cc0d32c4c7f4835c3a5394c  0.843109\n",
      "997  3f1129fe0105bec64fddeec6a476921aa870d74f  0.841950\n",
      "998  e098eb5ad5969aaaca2b46eb985e0c0dbac31c4e  0.844315\n",
      "999  fb2e2daad67ad438be5c981df38f60c288451255  0.840347\n",
      "\n",
      "[2000 rows x 2 columns]\n",
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "print(submission)\n",
    "print(type(submission))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9995bbea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T07:32:17.097220Z",
     "iopub.status.busy": "2025-07-10T07:32:17.096847Z",
     "iopub.status.idle": "2025-07-10T07:32:17.100710Z",
     "shell.execute_reply": "2025-07-10T07:32:17.099946Z"
    },
    "papermill": {
     "duration": 0.016859,
     "end_time": "2025-07-10T07:32:17.101696",
     "exception": false,
     "start_time": "2025-07-10T07:32:17.084837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4147895276546478\n",
      "0.8572883009910583\n"
     ]
    }
   ],
   "source": [
    "print(submission.label.min(axis=0))\n",
    "print(submission.label.max(axis=0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d90c8a08",
   "metadata": {
    "papermill": {
     "duration": 0.011561,
     "end_time": "2025-07-10T07:32:17.124720",
     "exception": false,
     "start_time": "2025-07-10T07:32:17.113159",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "import cv2\n",
    "#base_test_dir = path + 'test/'  #specify test data folder\n",
    "#test_files = glob(os.path.join(base_test_dir,'*.tif')) #find the test file names\n",
    "#submission = pd.DataFrame() #create a dataframe to hold results\n",
    "#file_batch = 5000 #we will predict 5000 images at a time\n",
    "#max_idx = len(test_files) #last index to use\n",
    "for idx in range(0, max_idx, file_batch): #iterate over test image batches\n",
    "    print(\"Indexes: %i - %i\"%(idx, idx+file_batch))\n",
    "    test_df = pd.DataFrame({'path': test_files[idx:idx+file_batch]}) #add the filenames to the dataframe\n",
    "    print(test_df)\n",
    "    test_df['image'] = test_path + \"/\" + test_df['path'].map(cv2.imread)\n",
    "    test_df['id'] = test_df.path.map(lambda x: x.split('/')[3].split(\".\")[0]) #add the ids to the dataframe\n",
    "    # test_df['image'] = test_df['path'].map(cv2.imread) #read the batch\n",
    "    K_test = np.stack(test_df[\"image\"].values) #convert to numpy array\n",
    "    predictions = model.predict(K_test,verbose = 1) #predict the labels for the test data\n",
    "    test_df['label'] = predictions #store them in the dataframe\n",
    "    submission = pd.concat([submission, test_df[[\"id\", \"label\"]]])\n",
    "submission.head() #display first lines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3103781",
   "metadata": {
    "papermill": {
     "duration": 0.011482,
     "end_time": "2025-07-10T07:32:17.147803",
     "exception": false,
     "start_time": "2025-07-10T07:32:17.136321",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "submission.to_csv(\"submission.csv\", index = False, header = True) #create the submission file"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 862157,
     "sourceId": 11848,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 79.326373,
   "end_time": "2025-07-10T07:32:20.297248",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-10T07:31:00.970875",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
